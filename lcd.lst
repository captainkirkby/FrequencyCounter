   1               		.file	"lcd.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  14               	toggle_e:
  15               	.LFB7:
  16               		.file 1 "lcd.c"
   1:lcd.c         **** /****************************************************************************
   2:lcd.c         ****  Title:     HD44780U LCD library
   3:lcd.c         ****  Author:    Peter Fleury <pfleury@gmx.ch>  http://tinyurl.com/peterfleury
   4:lcd.c         ****  File:	    $Id: lcd.c,v 1.15.2.2 2015/01/17 12:16:05 peter Exp $
   5:lcd.c         ****  Software:  AVR-GCC 3.3 
   6:lcd.c         ****  Target:    any AVR device, memory mapped mode only for AT90S4414/8515/Mega
   7:lcd.c         **** 
   8:lcd.c         ****  DESCRIPTION
   9:lcd.c         ****        Basic routines for interfacing a HD44780U-based text lcd display
  10:lcd.c         **** 
  11:lcd.c         ****        Originally based on Volker Oth's lcd library,
  12:lcd.c         ****        changed lcd_init(), added additional constants for lcd_command(),
  13:lcd.c         ****        added 4-bit I/O mode, improved and optimized code.
  14:lcd.c         **** 
  15:lcd.c         ****        Library can be operated in memory mapped mode (LCD_IO_MODE=0) or in 
  16:lcd.c         ****        4-bit IO port mode (LCD_IO_MODE=1). 8-bit IO port mode not supported.
  17:lcd.c         ****        
  18:lcd.c         ****        Memory mapped mode compatible with Kanda STK200, but supports also
  19:lcd.c         ****        generation of R/W signal through A8 address line.
  20:lcd.c         **** 
  21:lcd.c         ****  USAGE
  22:lcd.c         ****        See the C include lcd.h file for a description of each function
  23:lcd.c         ****        
  24:lcd.c         **** *****************************************************************************/
  25:lcd.c         **** #include <inttypes.h>
  26:lcd.c         **** #include <avr/io.h>
  27:lcd.c         **** #include <avr/pgmspace.h>
  28:lcd.c         **** #include <util/delay.h>
  29:lcd.c         **** #include "lcd.h"
  30:lcd.c         **** 
  31:lcd.c         **** 
  32:lcd.c         **** 
  33:lcd.c         **** /* 
  34:lcd.c         **** ** constants/macros 
  35:lcd.c         **** */
  36:lcd.c         **** #define DDR(x) (*(&x - 1))      /* address of data direction register of port x */
  37:lcd.c         **** #if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  38:lcd.c         ****     /* on ATmega64/128 PINF is on port 0x00 and not 0x60 */
  39:lcd.c         ****     #define PIN(x) ( &PORTF==&(x) ? _SFR_IO8(0x00) : (*(&x - 2)) )
  40:lcd.c         **** #else
  41:lcd.c         **** 	#define PIN(x) (*(&x - 2))    /* address of input register of port x          */
  42:lcd.c         **** #endif
  43:lcd.c         **** 
  44:lcd.c         **** 
  45:lcd.c         **** #if LCD_IO_MODE
  46:lcd.c         **** #define lcd_e_delay()   _delay_us(LCD_DELAY_ENABLE_PULSE)
  47:lcd.c         **** #define lcd_e_high()    LCD_E_PORT  |=  _BV(LCD_E_PIN);
  48:lcd.c         **** #define lcd_e_low()     LCD_E_PORT  &= ~_BV(LCD_E_PIN);
  49:lcd.c         **** #define lcd_e_toggle()  toggle_e()
  50:lcd.c         **** #define lcd_rw_high()   LCD_RW_PORT |=  _BV(LCD_RW_PIN)
  51:lcd.c         **** #define lcd_rw_low()    LCD_RW_PORT &= ~_BV(LCD_RW_PIN)
  52:lcd.c         **** #define lcd_rs_high()   LCD_RS_PORT |=  _BV(LCD_RS_PIN)
  53:lcd.c         **** #define lcd_rs_low()    LCD_RS_PORT &= ~_BV(LCD_RS_PIN)
  54:lcd.c         **** #endif
  55:lcd.c         **** 
  56:lcd.c         **** #if LCD_IO_MODE
  57:lcd.c         **** #if LCD_LINES==1
  58:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_1LINE 
  59:lcd.c         **** #else
  60:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_2LINES 
  61:lcd.c         **** #endif
  62:lcd.c         **** #else
  63:lcd.c         **** #if LCD_LINES==1
  64:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_8BIT_1LINE
  65:lcd.c         **** #else
  66:lcd.c         **** #define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_8BIT_2LINES
  67:lcd.c         **** #endif
  68:lcd.c         **** #endif
  69:lcd.c         **** 
  70:lcd.c         **** #if LCD_CONTROLLER_KS0073
  71:lcd.c         **** #if LCD_LINES==4
  72:lcd.c         **** 
  73:lcd.c         **** #define KS0073_EXTENDED_FUNCTION_REGISTER_ON  0x2C   /* |0|010|1100 4-bit mode, extension-bit RE = 
  74:lcd.c         **** #define KS0073_EXTENDED_FUNCTION_REGISTER_OFF 0x28   /* |0|010|1000 4-bit mode, extension-bit RE = 
  75:lcd.c         **** #define KS0073_4LINES_MODE                    0x09   /* |0|000|1001 4 lines mode */
  76:lcd.c         **** 
  77:lcd.c         **** #endif
  78:lcd.c         **** #endif
  79:lcd.c         **** 
  80:lcd.c         **** /* 
  81:lcd.c         **** ** function prototypes 
  82:lcd.c         **** */
  83:lcd.c         **** #if LCD_IO_MODE
  84:lcd.c         **** static void toggle_e(void);
  85:lcd.c         **** #endif
  86:lcd.c         **** 
  87:lcd.c         **** /*
  88:lcd.c         **** ** local functions
  89:lcd.c         **** */
  90:lcd.c         **** 
  91:lcd.c         **** 
  92:lcd.c         **** /************************************************************************* 
  93:lcd.c         **** delay for a minimum of <us> microseconds
  94:lcd.c         **** the number of loops is calculated at compile-time from MCU clock frequency
  95:lcd.c         **** *************************************************************************/
  96:lcd.c         **** #define delay(us)  _delay_us(us) 
  97:lcd.c         **** 
  98:lcd.c         **** 
  99:lcd.c         **** #if LCD_IO_MODE
 100:lcd.c         **** /* toggle Enable Pin to initiate write */
 101:lcd.c         **** static void toggle_e(void)
 102:lcd.c         **** {
  17               		.loc 1 102 0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 103:lcd.c         ****     lcd_e_high();
  23               		.loc 1 103 0
  24 0000 5E9A      		sbi 43-32,6
  25               	.LVL0:
  26               	.LBB30:
  27               	.LBB31:
  28               		.file 2 "/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 153:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 156:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 159:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#else
 160:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#endif
 163:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 164:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 165:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 166:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #else
 167:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	{
 172:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		{
 176:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 			__ticks --;
 179:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		}
 180:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		return;
 181:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	}
 182:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	else
 183:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
 186:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** }
 187:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 188:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /**
 189:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 191:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 193:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 196:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 198:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 202:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   
 207:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 211:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****  
 214:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 222:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****  */
 223:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** void
 224:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** {
 226:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 235:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 238:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 241:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#else
 242:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		//round up by default
 243:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#endif
 245:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 246:/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  29               		.loc 2 246 0
  30 0002 85E0      		 ldi r24,lo8(5)
  31 0004 8A95      	    1:dec r24
  32 0006 01F4      	    brne 1b
  33 0008 0000      		nop
  34               	.LBE31:
  35               	.LBE30:
 104:lcd.c         ****     lcd_e_delay();
 105:lcd.c         ****     lcd_e_low();
  36               		.loc 1 105 0
  37 000a 5E98      		cbi 43-32,6
  38               	/* epilogue start */
 106:lcd.c         **** }
  39               		.loc 1 106 0
  40 000c 0895      		ret
  41               		.cfi_endproc
  42               	.LFE7:
  45               	lcd_write:
  46               	.LFB8:
 107:lcd.c         **** #endif
 108:lcd.c         **** 
 109:lcd.c         **** 
 110:lcd.c         **** /*************************************************************************
 111:lcd.c         **** Low-level function to write byte to LCD controller
 112:lcd.c         **** Input:    data   byte to write to LCD
 113:lcd.c         ****           rs     1: write data    
 114:lcd.c         ****                  0: write instruction
 115:lcd.c         **** Returns:  none
 116:lcd.c         **** *************************************************************************/
 117:lcd.c         **** #if LCD_IO_MODE
 118:lcd.c         **** static void lcd_write(uint8_t data,uint8_t rs) 
 119:lcd.c         **** {
  47               		.loc 1 119 0
  48               		.cfi_startproc
  49               	.LVL1:
  50 000e 1F93      		push r17
  51               	.LCFI0:
  52               		.cfi_def_cfa_offset 3
  53               		.cfi_offset 17, -2
  54 0010 CF93      		push r28
  55               	.LCFI1:
  56               		.cfi_def_cfa_offset 4
  57               		.cfi_offset 28, -3
  58 0012 DF93      		push r29
  59               	.LCFI2:
  60               		.cfi_def_cfa_offset 5
  61               		.cfi_offset 29, -4
  62 0014 0F92      		push __tmp_reg__
  63               	.LCFI3:
  64               		.cfi_def_cfa_offset 6
  65 0016 CDB7      		in r28,__SP_L__
  66 0018 DEB7      		in r29,__SP_H__
  67               	.LCFI4:
  68               		.cfi_def_cfa_register 28
  69               	/* prologue: function */
  70               	/* frame size = 1 */
  71               	/* stack size = 4 */
  72               	.L__stack_usage = 4
 120:lcd.c         ****     unsigned char dataBits ;
 121:lcd.c         **** 
 122:lcd.c         **** 
 123:lcd.c         ****     if (rs) {        /* write data        (RS=1, RW=0) */
  73               		.loc 1 123 0
  74 001a 6623      		tst r22
  75 001c 01F0      		breq .L3
 124:lcd.c         ****        lcd_rs_high();
  76               		.loc 1 124 0
  77 001e 5C9A      		sbi 43-32,4
  78 0020 00C0      		rjmp .L4
  79               	.L3:
 125:lcd.c         ****     } else {         /* write instruction (RS=0, RW=0) */
 126:lcd.c         ****        lcd_rs_low();
  80               		.loc 1 126 0
  81 0022 5C98      		cbi 43-32,4
  82               	.L4:
 127:lcd.c         ****     }
 128:lcd.c         ****     lcd_rw_low();    /* RW=0  write mode      */
  83               		.loc 1 128 0
  84 0024 5D98      		cbi 43-32,5
 129:lcd.c         **** 
 130:lcd.c         ****     if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_
 131:lcd.c         ****       && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 
 132:lcd.c         ****     {
 133:lcd.c         ****         /* configure data pins as output */
 134:lcd.c         ****         DDR(LCD_DATA0_PORT) |= 0x0F;
  85               		.loc 1 134 0
  86 0026 9AB1      		in r25,42-32
  87 0028 9F60      		ori r25,lo8(15)
  88 002a 9AB9      		out 42-32,r25
 135:lcd.c         **** 
 136:lcd.c         ****         /* output high nibble first */
 137:lcd.c         ****         dataBits = LCD_DATA0_PORT & 0xF0;
  89               		.loc 1 137 0
  90 002c 1BB1      		in r17,43-32
  91 002e 107F      		andi r17,lo8(-16)
  92               	.LVL2:
 138:lcd.c         ****         LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
  93               		.loc 1 138 0
  94 0030 982F      		mov r25,r24
  95 0032 9295      		swap r25
  96 0034 9F70      		andi r25,lo8(15)
  97 0036 912B      		or r25,r17
  98 0038 9BB9      		out 43-32,r25
 139:lcd.c         ****         lcd_e_toggle();
  99               		.loc 1 139 0
 100 003a 8983      		std Y+1,r24
 101 003c 0E94 0000 		call toggle_e
 102               	.LVL3:
 140:lcd.c         **** 
 141:lcd.c         ****         /* output low nibble */
 142:lcd.c         ****         LCD_DATA0_PORT = dataBits | (data&0x0F);
 103               		.loc 1 142 0
 104 0040 8981      		ldd r24,Y+1
 105 0042 8F70      		andi r24,lo8(15)
 106 0044 812B      		or r24,r17
 107 0046 8BB9      		out 43-32,r24
 143:lcd.c         ****         lcd_e_toggle();
 108               		.loc 1 143 0
 109 0048 0E94 0000 		call toggle_e
 144:lcd.c         **** 
 145:lcd.c         ****         /* all data pins high (inactive) */
 146:lcd.c         ****         LCD_DATA0_PORT = dataBits | 0x0F;
 110               		.loc 1 146 0
 111 004c 1F60      		ori r17,lo8(15)
 112               	.LVL4:
 113 004e 1BB9      		out 43-32,r17
 114               	/* epilogue start */
 147:lcd.c         ****     }
 148:lcd.c         ****     else
 149:lcd.c         ****     {
 150:lcd.c         ****         /* configure data pins as output */
 151:lcd.c         ****         DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 152:lcd.c         ****         DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 153:lcd.c         ****         DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 154:lcd.c         ****         DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 155:lcd.c         ****         
 156:lcd.c         ****         /* output high nibble first */
 157:lcd.c         ****         LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 158:lcd.c         ****         LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 159:lcd.c         ****         LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 160:lcd.c         ****         LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 161:lcd.c         ****     	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 162:lcd.c         ****     	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 163:lcd.c         ****     	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 164:lcd.c         ****     	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 165:lcd.c         ****         lcd_e_toggle();
 166:lcd.c         ****         
 167:lcd.c         ****         /* output low nibble */
 168:lcd.c         ****         LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 169:lcd.c         ****         LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 170:lcd.c         ****         LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 171:lcd.c         ****         LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 172:lcd.c         ****     	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 173:lcd.c         ****     	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 174:lcd.c         ****     	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 175:lcd.c         ****     	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 176:lcd.c         ****         lcd_e_toggle();        
 177:lcd.c         ****         
 178:lcd.c         ****         /* all data pins high (inactive) */
 179:lcd.c         ****         LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 180:lcd.c         ****         LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 181:lcd.c         ****         LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 182:lcd.c         ****         LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 183:lcd.c         ****     }
 184:lcd.c         **** }
 115               		.loc 1 184 0
 116 0050 0F90      		pop __tmp_reg__
 117 0052 DF91      		pop r29
 118 0054 CF91      		pop r28
 119 0056 1F91      		pop r17
 120 0058 0895      		ret
 121               		.cfi_endproc
 122               	.LFE8:
 125               	lcd_read.constprop.0:
 126               	.LFB22:
 185:lcd.c         **** #else
 186:lcd.c         **** #define lcd_write(d,rs) if (rs) *(volatile uint8_t*)(LCD_IO_DATA) = d; else *(volatile uint8_t*)(LC
 187:lcd.c         **** /* rs==0 -> write instruction to LCD_IO_FUNCTION */
 188:lcd.c         **** /* rs==1 -> write data to LCD_IO_DATA */
 189:lcd.c         **** #endif
 190:lcd.c         **** 
 191:lcd.c         **** 
 192:lcd.c         **** /*************************************************************************
 193:lcd.c         **** Low-level function to read byte from LCD controller
 194:lcd.c         **** Input:    rs     1: read data    
 195:lcd.c         ****                  0: read busy flag / address counter
 196:lcd.c         **** Returns:  byte read from LCD controller
 197:lcd.c         **** *************************************************************************/
 198:lcd.c         **** #if LCD_IO_MODE
 199:lcd.c         **** static uint8_t lcd_read(uint8_t rs) 
 127               		.loc 1 199 0
 128               		.cfi_startproc
 129               	/* prologue: function */
 130               	/* frame size = 0 */
 131               	/* stack size = 0 */
 132               	.L__stack_usage = 0
 133               	.LVL5:
 200:lcd.c         **** {
 201:lcd.c         ****     uint8_t data;
 202:lcd.c         ****     
 203:lcd.c         ****     
 204:lcd.c         ****     if (rs)
 205:lcd.c         ****         lcd_rs_high();                       /* RS=1: read data      */
 206:lcd.c         ****     else
 207:lcd.c         ****         lcd_rs_low();                        /* RS=0: read busy flag */
 134               		.loc 1 207 0
 135 005a 5C98      		cbi 43-32,4
 208:lcd.c         ****     lcd_rw_high();                           /* RW=1  read mode      */
 136               		.loc 1 208 0
 137 005c 5D9A      		sbi 43-32,5
 209:lcd.c         ****     
 210:lcd.c         ****     if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_
 211:lcd.c         ****       && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN ==
 212:lcd.c         ****     {
 213:lcd.c         ****         DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 138               		.loc 1 213 0
 139 005e 8AB1      		in r24,42-32
 140 0060 807F      		andi r24,lo8(-16)
 141 0062 8AB9      		out 42-32,r24
 214:lcd.c         ****         
 215:lcd.c         ****         lcd_e_high();
 142               		.loc 1 215 0
 143 0064 5E9A      		sbi 43-32,6
 144               	.LVL6:
 145               	.LBB32:
 146               	.LBB33:
 147               		.loc 2 246 0
 148 0066 85E0      		 ldi r24,lo8(5)
 149 0068 8A95      	    1:dec r24
 150 006a 01F4      	    brne 1b
 151 006c 0000      		nop
 152               	.LBE33:
 153               	.LBE32:
 216:lcd.c         ****         lcd_e_delay();        
 217:lcd.c         ****         data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 154               		.loc 1 217 0
 155 006e 89B1      		in r24,41-32
 156               	.LVL7:
 218:lcd.c         ****         lcd_e_low();
 157               		.loc 1 218 0
 158 0070 5E98      		cbi 43-32,6
 159               	.LVL8:
 160               	.LBB34:
 161               	.LBB35:
 162               		.loc 2 246 0
 163 0072 95E0      		 ldi r25,lo8(5)
 164 0074 9A95      	    1:dec r25
 165 0076 01F4      	    brne 1b
 166 0078 0000      		nop
 167               	.LBE35:
 168               	.LBE34:
 219:lcd.c         ****         
 220:lcd.c         ****         lcd_e_delay();                       /* Enable 500ns low       */
 221:lcd.c         ****         
 222:lcd.c         ****         lcd_e_high();
 169               		.loc 1 222 0
 170 007a 5E9A      		sbi 43-32,6
 171               	.LVL9:
 172               	.LBB36:
 173               	.LBB37:
 174               		.loc 2 246 0
 175 007c 95E0      		 ldi r25,lo8(5)
 176 007e 9A95      	    1:dec r25
 177 0080 01F4      	    brne 1b
 178 0082 0000      		nop
 179               	.LBE37:
 180               	.LBE36:
 223:lcd.c         ****         lcd_e_delay();
 224:lcd.c         ****         data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 181               		.loc 1 224 0
 182 0084 99B1      		in r25,41-32
 183 0086 9F70      		andi r25,lo8(15)
 217:lcd.c         ****         data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 184               		.loc 1 217 0
 185 0088 8295      		swap r24
 186               	.LVL10:
 187 008a 807F      		andi r24,lo8(-16)
 188               	.LVL11:
 225:lcd.c         ****         lcd_e_low();
 189               		.loc 1 225 0
 190 008c 5E98      		cbi 43-32,6
 226:lcd.c         ****     }
 227:lcd.c         ****     else
 228:lcd.c         ****     {
 229:lcd.c         ****         /* configure data pins as input */
 230:lcd.c         ****         DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 231:lcd.c         ****         DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 232:lcd.c         ****         DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 233:lcd.c         ****         DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 234:lcd.c         ****                 
 235:lcd.c         ****         /* read high nibble first */
 236:lcd.c         ****         lcd_e_high();
 237:lcd.c         ****         lcd_e_delay();        
 238:lcd.c         ****         data = 0;
 239:lcd.c         ****         if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 240:lcd.c         ****         if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 241:lcd.c         ****         if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 242:lcd.c         ****         if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 243:lcd.c         ****         lcd_e_low();
 244:lcd.c         **** 
 245:lcd.c         ****         lcd_e_delay();                       /* Enable 500ns low       */
 246:lcd.c         ****     
 247:lcd.c         ****         /* read low nibble */    
 248:lcd.c         ****         lcd_e_high();
 249:lcd.c         ****         lcd_e_delay();
 250:lcd.c         ****         if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 251:lcd.c         ****         if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 252:lcd.c         ****         if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 253:lcd.c         ****         if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 254:lcd.c         ****         lcd_e_low();
 255:lcd.c         ****     }
 256:lcd.c         ****     return data;
 257:lcd.c         **** }
 191               		.loc 1 257 0
 192 008e 892B      		or r24,r25
 193               	.LVL12:
 194               	/* epilogue start */
 195 0090 0895      		ret
 196               		.cfi_endproc
 197               	.LFE22:
 200               	lcd_waitbusy:
 201               	.LFB10:
 258:lcd.c         **** #else
 259:lcd.c         **** #define lcd_read(rs) (rs) ? *(volatile uint8_t*)(LCD_IO_DATA+LCD_IO_READ) : *(volatile uint8_t*)(LC
 260:lcd.c         **** /* rs==0 -> read instruction from LCD_IO_FUNCTION */
 261:lcd.c         **** /* rs==1 -> read data from LCD_IO_DATA */
 262:lcd.c         **** #endif
 263:lcd.c         **** 
 264:lcd.c         **** 
 265:lcd.c         **** /*************************************************************************
 266:lcd.c         **** loops while lcd is busy, returns address counter
 267:lcd.c         **** *************************************************************************/
 268:lcd.c         **** static uint8_t lcd_waitbusy(void)
 269:lcd.c         **** 
 270:lcd.c         **** {
 202               		.loc 1 270 0
 203               		.cfi_startproc
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               	/* stack size = 0 */
 207               	.L__stack_usage = 0
 208               	.L7:
 271:lcd.c         ****     register uint8_t c;
 272:lcd.c         ****     
 273:lcd.c         ****     /* wait until busy flag is cleared */
 274:lcd.c         ****     while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 209               		.loc 1 274 0 discriminator 1
 210 0092 0E94 0000 		call lcd_read.constprop.0
 211               	.LVL13:
 212 0096 87FD      		sbrc r24,7
 213 0098 00C0      		rjmp .L7
 214               	.LVL14:
 215               	.LBB38:
 216               	.LBB39:
 217               		.loc 2 246 0
 218 009a 85E1      		 ldi r24,lo8(21)
 219 009c 8A95      	    1:dec r24
 220 009e 01F4      	    brne 1b
 221               	.LVL15:
 222 00a0 0000      		nop
 223               	.LBE39:
 224               	.LBE38:
 275:lcd.c         ****     
 276:lcd.c         ****     /* the address counter is updated 4us after the busy flag is cleared */
 277:lcd.c         ****     delay(LCD_DELAY_BUSY_FLAG);
 278:lcd.c         **** 
 279:lcd.c         ****     /* now read the address counter */
 280:lcd.c         ****     return (lcd_read(0));  // return address counter
 225               		.loc 1 280 0
 226 00a2 0E94 0000 		call lcd_read.constprop.0
 227               	/* epilogue start */
 281:lcd.c         ****     
 282:lcd.c         **** }/* lcd_waitbusy */
 228               		.loc 1 282 0
 229 00a6 0895      		ret
 230               		.cfi_endproc
 231               	.LFE10:
 233               	.global	lcd_command
 235               	lcd_command:
 236               	.LFB12:
 283:lcd.c         **** 
 284:lcd.c         **** 
 285:lcd.c         **** /*************************************************************************
 286:lcd.c         **** Move cursor to the start of next line or to the first line if the cursor 
 287:lcd.c         **** is already on the last line.
 288:lcd.c         **** *************************************************************************/
 289:lcd.c         **** static inline void lcd_newline(uint8_t pos)
 290:lcd.c         **** {
 291:lcd.c         ****     register uint8_t addressCounter;
 292:lcd.c         **** 
 293:lcd.c         **** 
 294:lcd.c         **** #if LCD_LINES==1
 295:lcd.c         ****     addressCounter = 0;
 296:lcd.c         **** #endif
 297:lcd.c         **** #if LCD_LINES==2
 298:lcd.c         ****     if ( pos < (LCD_START_LINE2) )
 299:lcd.c         ****         addressCounter = LCD_START_LINE2;
 300:lcd.c         ****     else
 301:lcd.c         ****         addressCounter = LCD_START_LINE1;
 302:lcd.c         **** #endif
 303:lcd.c         **** #if LCD_LINES==4
 304:lcd.c         **** #if KS0073_4LINES_MODE
 305:lcd.c         ****     if ( pos < LCD_START_LINE2 )
 306:lcd.c         ****         addressCounter = LCD_START_LINE2;
 307:lcd.c         ****     else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE3) )
 308:lcd.c         ****         addressCounter = LCD_START_LINE3;
 309:lcd.c         ****     else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
 310:lcd.c         ****         addressCounter = LCD_START_LINE4;
 311:lcd.c         ****     else 
 312:lcd.c         ****         addressCounter = LCD_START_LINE1;
 313:lcd.c         **** #else
 314:lcd.c         ****     if ( pos < LCD_START_LINE3 )
 315:lcd.c         ****         addressCounter = LCD_START_LINE2;
 316:lcd.c         ****     else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
 317:lcd.c         ****         addressCounter = LCD_START_LINE3;
 318:lcd.c         ****     else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
 319:lcd.c         ****         addressCounter = LCD_START_LINE4;
 320:lcd.c         ****     else 
 321:lcd.c         ****         addressCounter = LCD_START_LINE1;
 322:lcd.c         **** #endif
 323:lcd.c         **** #endif
 324:lcd.c         ****     lcd_command((1<<LCD_DDRAM)+addressCounter);
 325:lcd.c         **** 
 326:lcd.c         **** }/* lcd_newline */
 327:lcd.c         **** 
 328:lcd.c         **** 
 329:lcd.c         **** /*
 330:lcd.c         **** ** PUBLIC FUNCTIONS 
 331:lcd.c         **** */
 332:lcd.c         **** 
 333:lcd.c         **** /*************************************************************************
 334:lcd.c         **** Send LCD controller instruction command
 335:lcd.c         **** Input:   instruction to send to LCD controller, see HD44780 data sheet
 336:lcd.c         **** Returns: none
 337:lcd.c         **** *************************************************************************/
 338:lcd.c         **** void lcd_command(uint8_t cmd)
 339:lcd.c         **** {
 237               		.loc 1 339 0
 238               		.cfi_startproc
 239               	.LVL16:
 240 00a8 CF93      		push r28
 241               	.LCFI5:
 242               		.cfi_def_cfa_offset 3
 243               		.cfi_offset 28, -2
 244               	/* prologue: function */
 245               	/* frame size = 0 */
 246               	/* stack size = 1 */
 247               	.L__stack_usage = 1
 248 00aa C82F      		mov r28,r24
 340:lcd.c         ****     lcd_waitbusy();
 249               		.loc 1 340 0
 250 00ac 0E94 0000 		call lcd_waitbusy
 251               	.LVL17:
 341:lcd.c         ****     lcd_write(cmd,0);
 252               		.loc 1 341 0
 253 00b0 8C2F      		mov r24,r28
 254 00b2 60E0      		ldi r22,lo8(0)
 255 00b4 0E94 0000 		call lcd_write
 256               	/* epilogue start */
 342:lcd.c         **** }
 257               		.loc 1 342 0
 258 00b8 CF91      		pop r28
 259               	.LVL18:
 260 00ba 0895      		ret
 261               		.cfi_endproc
 262               	.LFE12:
 264               	.global	lcd_data
 266               	lcd_data:
 267               	.LFB13:
 343:lcd.c         **** 
 344:lcd.c         **** 
 345:lcd.c         **** /*************************************************************************
 346:lcd.c         **** Send data byte to LCD controller 
 347:lcd.c         **** Input:   data to send to LCD controller, see HD44780 data sheet
 348:lcd.c         **** Returns: none
 349:lcd.c         **** *************************************************************************/
 350:lcd.c         **** void lcd_data(uint8_t data)
 351:lcd.c         **** {
 268               		.loc 1 351 0
 269               		.cfi_startproc
 270               	.LVL19:
 271 00bc CF93      		push r28
 272               	.LCFI6:
 273               		.cfi_def_cfa_offset 3
 274               		.cfi_offset 28, -2
 275               	/* prologue: function */
 276               	/* frame size = 0 */
 277               	/* stack size = 1 */
 278               	.L__stack_usage = 1
 279 00be C82F      		mov r28,r24
 352:lcd.c         ****     lcd_waitbusy();
 280               		.loc 1 352 0
 281 00c0 0E94 0000 		call lcd_waitbusy
 282               	.LVL20:
 353:lcd.c         ****     lcd_write(data,1);
 283               		.loc 1 353 0
 284 00c4 8C2F      		mov r24,r28
 285 00c6 61E0      		ldi r22,lo8(1)
 286 00c8 0E94 0000 		call lcd_write
 287               	/* epilogue start */
 354:lcd.c         **** }
 288               		.loc 1 354 0
 289 00cc CF91      		pop r28
 290               	.LVL21:
 291 00ce 0895      		ret
 292               		.cfi_endproc
 293               	.LFE13:
 295               	.global	lcd_gotoxy
 297               	lcd_gotoxy:
 298               	.LFB14:
 355:lcd.c         **** 
 356:lcd.c         **** 
 357:lcd.c         **** 
 358:lcd.c         **** /*************************************************************************
 359:lcd.c         **** Set cursor to specified position
 360:lcd.c         **** Input:    x  horizontal position  (0: left most position)
 361:lcd.c         ****           y  vertical position    (0: first line)
 362:lcd.c         **** Returns:  none
 363:lcd.c         **** *************************************************************************/
 364:lcd.c         **** void lcd_gotoxy(uint8_t x, uint8_t y)
 365:lcd.c         **** {
 299               		.loc 1 365 0
 300               		.cfi_startproc
 301               	.LVL22:
 302               	/* prologue: function */
 303               	/* frame size = 0 */
 304               	/* stack size = 0 */
 305               	.L__stack_usage = 0
 366:lcd.c         **** #if LCD_LINES==1
 367:lcd.c         ****     lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 368:lcd.c         **** #endif
 369:lcd.c         **** #if LCD_LINES==2
 370:lcd.c         ****     if ( y==0 ) 
 371:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 372:lcd.c         ****     else
 373:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 374:lcd.c         **** #endif
 375:lcd.c         **** #if LCD_LINES==4
 376:lcd.c         ****     if ( y==0 )
 306               		.loc 1 376 0
 307 00d0 6623      		tst r22
 308 00d2 01F4      		brne .L12
 377:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 309               		.loc 1 377 0
 310 00d4 8058      		subi r24,lo8(-(-128))
 311               	.LVL23:
 312 00d6 00C0      		rjmp .L16
 313               	.LVL24:
 314               	.L12:
 378:lcd.c         ****     else if ( y==1)
 315               		.loc 1 378 0
 316 00d8 6130      		cpi r22,lo8(1)
 317 00da 01F4      		brne .L14
 379:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 318               		.loc 1 379 0
 319 00dc 8054      		subi r24,lo8(-(-64))
 320               	.LVL25:
 321 00de 00C0      		rjmp .L16
 322               	.LVL26:
 323               	.L14:
 380:lcd.c         ****     else if ( y==2)
 324               		.loc 1 380 0
 325 00e0 6230      		cpi r22,lo8(2)
 326 00e2 01F4      		brne .L15
 381:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
 327               		.loc 1 381 0
 328 00e4 8C56      		subi r24,lo8(-(-108))
 329               	.LVL27:
 330 00e6 00C0      		rjmp .L16
 331               	.LVL28:
 332               	.L15:
 382:lcd.c         ****     else /* y==3 */
 383:lcd.c         ****         lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
 333               		.loc 1 383 0
 334 00e8 8C52      		subi r24,lo8(-(-44))
 335               	.LVL29:
 336               	.L16:
 337 00ea 0E94 0000 		call lcd_command
 338               	.LVL30:
 339 00ee 0895      		ret
 340               		.cfi_endproc
 341               	.LFE14:
 343               	.global	lcd_getxy
 345               	lcd_getxy:
 346               	.LFB15:
 384:lcd.c         **** #endif
 385:lcd.c         **** 
 386:lcd.c         **** }/* lcd_gotoxy */
 387:lcd.c         **** 
 388:lcd.c         **** 
 389:lcd.c         **** /*************************************************************************
 390:lcd.c         **** *************************************************************************/
 391:lcd.c         **** int lcd_getxy(void)
 392:lcd.c         **** {
 347               		.loc 1 392 0
 348               		.cfi_startproc
 349               	/* prologue: function */
 350               	/* frame size = 0 */
 351               	/* stack size = 0 */
 352               	.L__stack_usage = 0
 393:lcd.c         ****     return lcd_waitbusy();
 353               		.loc 1 393 0
 354 00f0 0E94 0000 		call lcd_waitbusy
 394:lcd.c         **** }
 355               		.loc 1 394 0
 356 00f4 90E0      		ldi r25,lo8(0)
 357               	/* epilogue start */
 358 00f6 0895      		ret
 359               		.cfi_endproc
 360               	.LFE15:
 362               	.global	lcd_clrscr
 364               	lcd_clrscr:
 365               	.LFB16:
 395:lcd.c         **** 
 396:lcd.c         **** 
 397:lcd.c         **** /*************************************************************************
 398:lcd.c         **** Clear display and set cursor to home position
 399:lcd.c         **** *************************************************************************/
 400:lcd.c         **** void lcd_clrscr(void)
 401:lcd.c         **** {
 366               		.loc 1 401 0
 367               		.cfi_startproc
 368               	/* prologue: function */
 369               	/* frame size = 0 */
 370               	/* stack size = 0 */
 371               	.L__stack_usage = 0
 402:lcd.c         ****     lcd_command(1<<LCD_CLR);
 372               		.loc 1 402 0
 373 00f8 81E0      		ldi r24,lo8(1)
 374 00fa 0E94 0000 		call lcd_command
 375               	/* epilogue start */
 403:lcd.c         **** }
 376               		.loc 1 403 0
 377 00fe 0895      		ret
 378               		.cfi_endproc
 379               	.LFE16:
 381               	.global	lcd_home
 383               	lcd_home:
 384               	.LFB17:
 404:lcd.c         **** 
 405:lcd.c         **** 
 406:lcd.c         **** /*************************************************************************
 407:lcd.c         **** Set cursor to home position
 408:lcd.c         **** *************************************************************************/
 409:lcd.c         **** void lcd_home(void)
 410:lcd.c         **** {
 385               		.loc 1 410 0
 386               		.cfi_startproc
 387               	/* prologue: function */
 388               	/* frame size = 0 */
 389               	/* stack size = 0 */
 390               	.L__stack_usage = 0
 411:lcd.c         ****     lcd_command(1<<LCD_HOME);
 391               		.loc 1 411 0
 392 0100 82E0      		ldi r24,lo8(2)
 393 0102 0E94 0000 		call lcd_command
 394               	/* epilogue start */
 412:lcd.c         **** }
 395               		.loc 1 412 0
 396 0106 0895      		ret
 397               		.cfi_endproc
 398               	.LFE17:
 400               	.global	lcd_putc
 402               	lcd_putc:
 403               	.LFB18:
 413:lcd.c         **** 
 414:lcd.c         **** 
 415:lcd.c         **** /*************************************************************************
 416:lcd.c         **** Display character at current cursor position 
 417:lcd.c         **** Input:    character to be displayed                                       
 418:lcd.c         **** Returns:  none
 419:lcd.c         **** *************************************************************************/
 420:lcd.c         **** void lcd_putc(char c)
 421:lcd.c         **** {
 404               		.loc 1 421 0
 405               		.cfi_startproc
 406               	.LVL31:
 407 0108 CF93      		push r28
 408               	.LCFI7:
 409               		.cfi_def_cfa_offset 3
 410               		.cfi_offset 28, -2
 411               	/* prologue: function */
 412               	/* frame size = 0 */
 413               	/* stack size = 1 */
 414               	.L__stack_usage = 1
 415 010a C82F      		mov r28,r24
 422:lcd.c         ****     uint8_t pos;
 423:lcd.c         **** 
 424:lcd.c         **** 
 425:lcd.c         ****     pos = lcd_waitbusy();   // read busy-flag and address counter
 416               		.loc 1 425 0
 417 010c 0E94 0000 		call lcd_waitbusy
 418               	.LVL32:
 426:lcd.c         ****     if (c=='\n')
 419               		.loc 1 426 0
 420 0110 CA30      		cpi r28,lo8(10)
 421 0112 01F4      		brne .L21
 422               	.LVL33:
 423               	.LBB40:
 424               	.LBB41:
 314:lcd.c         ****     if ( pos < LCD_START_LINE3 )
 425               		.loc 1 314 0
 426 0114 8431      		cpi r24,lo8(20)
 427 0116 00F0      		brlo .L24
 316:lcd.c         ****     else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
 428               		.loc 1 316 0
 429 0118 982F      		mov r25,r24
 430 011a 9054      		subi r25,lo8(-(-64))
 431 011c 9431      		cpi r25,lo8(20)
 432 011e 00F0      		brlo .L25
 318:lcd.c         ****     else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
 433               		.loc 1 318 0
 434 0120 8451      		subi r24,lo8(-(-20))
 435               	.LVL34:
 436 0122 8C32      		cpi r24,lo8(44)
 437 0124 00F4      		brsh .L26
 319:lcd.c         ****         addressCounter = LCD_START_LINE4;
 438               		.loc 1 319 0
 439 0126 84E5      		ldi r24,lo8(84)
 440 0128 00C0      		rjmp .L22
 441               	.LVL35:
 442               	.L24:
 315:lcd.c         ****         addressCounter = LCD_START_LINE2;
 443               		.loc 1 315 0
 444 012a 80E4      		ldi r24,lo8(64)
 445               	.LVL36:
 446 012c 00C0      		rjmp .L22
 447               	.LVL37:
 448               	.L25:
 317:lcd.c         ****         addressCounter = LCD_START_LINE3;
 449               		.loc 1 317 0
 450 012e 84E1      		ldi r24,lo8(20)
 451               	.LVL38:
 452 0130 00C0      		rjmp .L22
 453               	.L26:
 321:lcd.c         ****         addressCounter = LCD_START_LINE1;
 454               		.loc 1 321 0
 455 0132 80E0      		ldi r24,lo8(0)
 456               	.LVL39:
 457               	.L22:
 324:lcd.c         ****     lcd_command((1<<LCD_DDRAM)+addressCounter);
 458               		.loc 1 324 0
 459 0134 8058      		subi r24,lo8(-(-128))
 460               	.LVL40:
 461 0136 0E94 0000 		call lcd_command
 462               	.LVL41:
 463 013a 00C0      		rjmp .L20
 464               	.LVL42:
 465               	.L21:
 466               	.LBE41:
 467               	.LBE40:
 427:lcd.c         ****     {
 428:lcd.c         ****         lcd_newline(pos);
 429:lcd.c         ****     }
 430:lcd.c         ****     else
 431:lcd.c         ****     {
 432:lcd.c         **** #if LCD_WRAP_LINES==1
 433:lcd.c         **** #if LCD_LINES==1
 434:lcd.c         ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 435:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 436:lcd.c         ****         }
 437:lcd.c         **** #elif LCD_LINES==2
 438:lcd.c         ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 439:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
 440:lcd.c         ****         }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
 441:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 442:lcd.c         ****         }
 443:lcd.c         **** #elif LCD_LINES==4
 444:lcd.c         ****         if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
 445:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
 446:lcd.c         ****         }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
 447:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
 448:lcd.c         ****         }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
 449:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
 450:lcd.c         ****         }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
 451:lcd.c         ****             lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
 452:lcd.c         ****         }
 453:lcd.c         **** #endif
 454:lcd.c         ****         lcd_waitbusy();
 455:lcd.c         **** #endif
 456:lcd.c         ****         lcd_write(c, 1);
 468               		.loc 1 456 0
 469 013c 8C2F      		mov r24,r28
 470               	.LVL43:
 471 013e 61E0      		ldi r22,lo8(1)
 472 0140 0E94 0000 		call lcd_write
 473               	.L20:
 474               	/* epilogue start */
 457:lcd.c         ****     }
 458:lcd.c         **** 
 459:lcd.c         **** }/* lcd_putc */
 475               		.loc 1 459 0
 476 0144 CF91      		pop r28
 477               	.LVL44:
 478 0146 0895      		ret
 479               		.cfi_endproc
 480               	.LFE18:
 482               	.global	lcd_puts
 484               	lcd_puts:
 485               	.LFB19:
 460:lcd.c         **** 
 461:lcd.c         **** 
 462:lcd.c         **** /*************************************************************************
 463:lcd.c         **** Display string without auto linefeed 
 464:lcd.c         **** Input:    string to be displayed
 465:lcd.c         **** Returns:  none
 466:lcd.c         **** *************************************************************************/
 467:lcd.c         **** void lcd_puts(const char *s)
 468:lcd.c         **** /* print string on lcd (no auto linefeed) */
 469:lcd.c         **** {
 486               		.loc 1 469 0
 487               		.cfi_startproc
 488               	.LVL45:
 489 0148 CF93      		push r28
 490               	.LCFI8:
 491               		.cfi_def_cfa_offset 3
 492               		.cfi_offset 28, -2
 493 014a DF93      		push r29
 494               	.LCFI9:
 495               		.cfi_def_cfa_offset 4
 496               		.cfi_offset 29, -3
 497               	/* prologue: function */
 498               	/* frame size = 0 */
 499               	/* stack size = 2 */
 500               	.L__stack_usage = 2
 501 014c EC01      		movw r28,r24
 470:lcd.c         ****     register char c;
 471:lcd.c         **** 
 472:lcd.c         ****     while ( (c = *s++) ) {
 502               		.loc 1 472 0
 503 014e 00C0      		rjmp .L28
 504               	.LVL46:
 505               	.L29:
 473:lcd.c         ****         lcd_putc(c);
 506               		.loc 1 473 0
 507 0150 0E94 0000 		call lcd_putc
 508               	.LVL47:
 509               	.L28:
 472:lcd.c         ****     while ( (c = *s++) ) {
 510               		.loc 1 472 0 discriminator 1
 511 0154 8991      		ld r24,Y+
 512               	.LVL48:
 513 0156 8823      		tst r24
 514 0158 01F4      		brne .L29
 515               	/* epilogue start */
 474:lcd.c         ****     }
 475:lcd.c         **** 
 476:lcd.c         **** }/* lcd_puts */
 516               		.loc 1 476 0
 517 015a DF91      		pop r29
 518 015c CF91      		pop r28
 519               	.LVL49:
 520 015e 0895      		ret
 521               		.cfi_endproc
 522               	.LFE19:
 524               	.global	lcd_puts_p
 526               	lcd_puts_p:
 527               	.LFB20:
 477:lcd.c         **** 
 478:lcd.c         **** 
 479:lcd.c         **** /*************************************************************************
 480:lcd.c         **** Display string from program memory without auto linefeed 
 481:lcd.c         **** Input:     string from program memory be be displayed                                        
 482:lcd.c         **** Returns:   none
 483:lcd.c         **** *************************************************************************/
 484:lcd.c         **** void lcd_puts_p(const char *progmem_s)
 485:lcd.c         **** /* print string from program memory on lcd (no auto linefeed) */
 486:lcd.c         **** {
 528               		.loc 1 486 0
 529               		.cfi_startproc
 530               	.LVL50:
 531 0160 CF93      		push r28
 532               	.LCFI10:
 533               		.cfi_def_cfa_offset 3
 534               		.cfi_offset 28, -2
 535 0162 DF93      		push r29
 536               	.LCFI11:
 537               		.cfi_def_cfa_offset 4
 538               		.cfi_offset 29, -3
 539               	/* prologue: function */
 540               	/* frame size = 0 */
 541               	/* stack size = 2 */
 542               	.L__stack_usage = 2
 543 0164 EC01      		movw r28,r24
 487:lcd.c         ****     register char c;
 488:lcd.c         **** 
 489:lcd.c         ****     while ( (c = pgm_read_byte(progmem_s++)) ) {
 544               		.loc 1 489 0
 545 0166 00C0      		rjmp .L31
 546               	.LVL51:
 547               	.L32:
 490:lcd.c         ****         lcd_putc(c);
 548               		.loc 1 490 0
 549 0168 0E94 0000 		call lcd_putc
 550               	.LVL52:
 551               	.L31:
 552               	.LBB42:
 489:lcd.c         ****     while ( (c = pgm_read_byte(progmem_s++)) ) {
 553               		.loc 1 489 0 discriminator 1
 554 016c FE01      		movw r30,r28
 555               	.LVL53:
 556 016e 2196      		adiw r28,1
 557               	.LVL54:
 558               	/* #APP */
 559               	 ;  489 "lcd.c" 1
 560 0170 8491      		lpm r24, Z
 561               		
 562               	 ;  0 "" 2
 563               	.LVL55:
 564               	/* #NOAPP */
 565               	.LBE42:
 566 0172 8823      		tst r24
 567 0174 01F4      		brne .L32
 568               	/* epilogue start */
 491:lcd.c         ****     }
 492:lcd.c         **** 
 493:lcd.c         **** }/* lcd_puts_p */
 569               		.loc 1 493 0
 570 0176 DF91      		pop r29
 571 0178 CF91      		pop r28
 572               	.LVL56:
 573 017a 0895      		ret
 574               		.cfi_endproc
 575               	.LFE20:
 577               	.global	lcd_init
 579               	lcd_init:
 580               	.LFB21:
 494:lcd.c         **** 
 495:lcd.c         **** 
 496:lcd.c         **** /*************************************************************************
 497:lcd.c         **** Initialize display and select type of cursor 
 498:lcd.c         **** Input:    dispAttr LCD_DISP_OFF            display off
 499:lcd.c         ****                    LCD_DISP_ON             display on, cursor off
 500:lcd.c         ****                    LCD_DISP_ON_CURSOR      display on, cursor on
 501:lcd.c         ****                    LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
 502:lcd.c         **** Returns:  none
 503:lcd.c         **** *************************************************************************/
 504:lcd.c         **** void lcd_init(uint8_t dispAttr)
 505:lcd.c         **** {
 581               		.loc 1 505 0
 582               		.cfi_startproc
 583               	.LVL57:
 584 017c CF93      		push r28
 585               	.LCFI12:
 586               		.cfi_def_cfa_offset 3
 587               		.cfi_offset 28, -2
 588               	/* prologue: function */
 589               	/* frame size = 0 */
 590               	/* stack size = 1 */
 591               	.L__stack_usage = 1
 592 017e C82F      		mov r28,r24
 506:lcd.c         **** #if LCD_IO_MODE
 507:lcd.c         ****     /*
 508:lcd.c         ****      *  Initialize LCD to 4 bit I/O mode
 509:lcd.c         ****      */
 510:lcd.c         ****      
 511:lcd.c         ****     if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_
 512:lcd.c         ****       && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT =
 513:lcd.c         ****       && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN ==
 514:lcd.c         ****       && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
 515:lcd.c         ****     {
 516:lcd.c         ****         /* configure all port bits as output (all LCD lines on same port) */
 517:lcd.c         ****         DDR(LCD_DATA0_PORT) |= 0x7F;
 593               		.loc 1 517 0
 594 0180 8AB1      		in r24,42-32
 595               	.LVL58:
 596 0182 8F67      		ori r24,lo8(127)
 597 0184 8AB9      		out 42-32,r24
 598               	.LVL59:
 599               	.LBB43:
 600               	.LBB44:
 601               		.loc 2 246 0
 602 0186 8FEF      		 ldi r24,lo8(-1537)
 603 0188 99EF      	    ldi r25,hi8(-1537)
 604 018a 0197      	    1:sbiw r24,1
 605 018c 01F4      	    brne 1b
 606 018e 00C0      		rjmp .
 607 0190 0000      		nop
 608               	.LBE44:
 609               	.LBE43:
 518:lcd.c         ****     }
 519:lcd.c         ****     else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( 
 520:lcd.c         ****            && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_P
 521:lcd.c         ****     {
 522:lcd.c         ****         /* configure all port bits as output (all LCD data lines on same port, but control lines on
 523:lcd.c         ****         DDR(LCD_DATA0_PORT) |= 0x0F;
 524:lcd.c         ****         DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 525:lcd.c         ****         DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 526:lcd.c         ****         DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 527:lcd.c         ****     }
 528:lcd.c         ****     else
 529:lcd.c         ****     {
 530:lcd.c         ****         /* configure all port bits as output (LCD data and control lines on different ports */
 531:lcd.c         ****         DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 532:lcd.c         ****         DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 533:lcd.c         ****         DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 534:lcd.c         ****         DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 535:lcd.c         ****         DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 536:lcd.c         ****         DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 537:lcd.c         ****         DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 538:lcd.c         ****     }
 539:lcd.c         ****     delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
 540:lcd.c         ****     
 541:lcd.c         ****     /* initial write to lcd is 8bit */
 542:lcd.c         ****     LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 610               		.loc 1 542 0
 611 0192 599A      		sbi 43-32,1
 543:lcd.c         ****     LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 612               		.loc 1 543 0
 613 0194 589A      		sbi 43-32,0
 544:lcd.c         ****     lcd_e_toggle();
 614               		.loc 1 544 0
 615 0196 0E94 0000 		call toggle_e
 616               	.LVL60:
 617               	.LBB45:
 618               	.LBB46:
 619               		.loc 2 246 0
 620 019a 8FE1      		 ldi r24,lo8(19999)
 621 019c 9EE4      	    ldi r25,hi8(19999)
 622 019e 0197      	    1:sbiw r24,1
 623 01a0 01F4      	    brne 1b
 624 01a2 00C0      		rjmp .
 625 01a4 0000      		nop
 626               	.LBE46:
 627               	.LBE45:
 545:lcd.c         ****     delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
 546:lcd.c         ****    
 547:lcd.c         ****     /* repeat last command */ 
 548:lcd.c         ****     lcd_e_toggle();      
 628               		.loc 1 548 0
 629 01a6 0E94 0000 		call toggle_e
 630               	.LVL61:
 631               	.LBB47:
 632               	.LBB48:
 633               		.loc 2 246 0
 634 01aa 8FEF      		 ldi r24,lo8(255)
 635 01ac 90E0      	    ldi r25,hi8(255)
 636 01ae 0197      	    1:sbiw r24,1
 637 01b0 01F4      	    brne 1b
 638 01b2 00C0      		rjmp .
 639 01b4 0000      		nop
 640               	.LBE48:
 641               	.LBE47:
 549:lcd.c         ****     delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
 550:lcd.c         ****     
 551:lcd.c         ****     /* repeat last command a third time */
 552:lcd.c         ****     lcd_e_toggle();      
 642               		.loc 1 552 0
 643 01b6 0E94 0000 		call toggle_e
 644               	.LVL62:
 645               	.LBB49:
 646               	.LBB50:
 647               		.loc 2 246 0
 648 01ba 8FEF      		 ldi r24,lo8(255)
 649 01bc 90E0      	    ldi r25,hi8(255)
 650 01be 0197      	    1:sbiw r24,1
 651 01c0 01F4      	    brne 1b
 652 01c2 00C0      		rjmp .
 653 01c4 0000      		nop
 654               	.LBE50:
 655               	.LBE49:
 553:lcd.c         ****     delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
 554:lcd.c         **** 
 555:lcd.c         ****     /* now configure for 4bit mode */
 556:lcd.c         ****     LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 656               		.loc 1 556 0
 657 01c6 5898      		cbi 43-32,0
 557:lcd.c         ****     lcd_e_toggle();
 658               		.loc 1 557 0
 659 01c8 0E94 0000 		call toggle_e
 660               	.LVL63:
 661               	.LBB51:
 662               	.LBB52:
 663               		.loc 2 246 0
 664 01cc 8FEF      		 ldi r24,lo8(255)
 665 01ce 90E0      	    ldi r25,hi8(255)
 666 01d0 0197      	    1:sbiw r24,1
 667 01d2 01F4      	    brne 1b
 668 01d4 00C0      		rjmp .
 669 01d6 0000      		nop
 670               	.LBE52:
 671               	.LBE51:
 558:lcd.c         ****     delay(LCD_DELAY_INIT_4BIT);          /* some displays need this additional delay */
 559:lcd.c         ****     
 560:lcd.c         ****     /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
 561:lcd.c         **** #else
 562:lcd.c         ****     /*
 563:lcd.c         ****      * Initialize LCD to 8 bit memory mapped mode
 564:lcd.c         ****      */
 565:lcd.c         ****     
 566:lcd.c         ****     /* enable external SRAM (memory mapped lcd) and one wait state */        
 567:lcd.c         ****     MCUCR = _BV(SRE) | _BV(SRW);
 568:lcd.c         **** 
 569:lcd.c         ****     /* reset LCD */
 570:lcd.c         ****     delay(LCD_DELAY_BOOTUP);                    /* wait 16ms after power-on     */
 571:lcd.c         ****     lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                   
 572:lcd.c         ****     delay(LCD_DELAY_INIT);                      /* wait 5ms                     */
 573:lcd.c         ****     lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
 574:lcd.c         ****     delay(LCD_DELAY_INIT_REP);                  /* wait 64us                    */
 575:lcd.c         ****     lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
 576:lcd.c         ****     delay(LCD_DELAY_INIT_REP);                  /* wait 64us                    */
 577:lcd.c         **** #endif
 578:lcd.c         **** 
 579:lcd.c         **** #if KS0073_4LINES_MODE
 580:lcd.c         ****     /* Display with KS0073 controller requires special commands for enabling 4 line mode */
 581:lcd.c         **** 	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
 582:lcd.c         **** 	lcd_command(KS0073_4LINES_MODE);
 583:lcd.c         **** 	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
 584:lcd.c         **** #else
 585:lcd.c         ****     lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 672               		.loc 1 585 0
 673 01d8 88E2      		ldi r24,lo8(40)
 674 01da 0E94 0000 		call lcd_command
 586:lcd.c         **** #endif
 587:lcd.c         ****     lcd_command(LCD_DISP_OFF);              /* display off                  */
 675               		.loc 1 587 0
 676 01de 88E0      		ldi r24,lo8(8)
 677 01e0 0E94 0000 		call lcd_command
 588:lcd.c         ****     lcd_clrscr();                           /* display clear                */ 
 678               		.loc 1 588 0
 679 01e4 0E94 0000 		call lcd_clrscr
 589:lcd.c         ****     lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 680               		.loc 1 589 0
 681 01e8 86E0      		ldi r24,lo8(6)
 682 01ea 0E94 0000 		call lcd_command
 590:lcd.c         ****     lcd_command(dispAttr);                  /* display/cursor control       */
 683               		.loc 1 590 0
 684 01ee 8C2F      		mov r24,r28
 685 01f0 0E94 0000 		call lcd_command
 686               	/* epilogue start */
 591:lcd.c         **** 
 592:lcd.c         **** }/* lcd_init */
 687               		.loc 1 592 0
 688 01f4 CF91      		pop r28
 689               	.LVL64:
 690 01f6 0895      		ret
 691               		.cfi_endproc
 692               	.LFE21:
 694               	.Letext0:
 695               		.file 3 "/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
               lcd.s:2      *ABS*:0000003f __SREG__
               lcd.s:3      *ABS*:0000003e __SP_H__
               lcd.s:4      *ABS*:0000003d __SP_L__
               lcd.s:5      *ABS*:00000034 __CCP__
               lcd.s:6      *ABS*:00000000 __tmp_reg__
               lcd.s:7      *ABS*:00000001 __zero_reg__
               lcd.s:14     .text:00000000 toggle_e
               lcd.s:45     .text:0000000e lcd_write
               lcd.s:125    .text:0000005a lcd_read.constprop.0
               lcd.s:200    .text:00000092 lcd_waitbusy
               lcd.s:235    .text:000000a8 lcd_command
               lcd.s:266    .text:000000bc lcd_data
               lcd.s:297    .text:000000d0 lcd_gotoxy
               lcd.s:345    .text:000000f0 lcd_getxy
               lcd.s:364    .text:000000f8 lcd_clrscr
               lcd.s:383    .text:00000100 lcd_home
               lcd.s:402    .text:00000108 lcd_putc
               lcd.s:484    .text:00000148 lcd_puts
               lcd.s:526    .text:00000160 lcd_puts_p
               lcd.s:579    .text:0000017c lcd_init

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
