   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               	.global	initInputs
  15               	initInputs:
  16               	.LFB9:
  17               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * Frequency Counter
   3:main.c        ****  * Counts at 16MHz with a resolution of 62.5ns
   4:main.c        ****  * Displays result on an LCD
   5:main.c        ****  *
   6:main.c        ****  * Author: Dylan Kirkby
   7:main.c        ****  * Date: 12/2/16
   8:main.c        ****  */
   9:main.c        **** 
  10:main.c        **** #include <stdlib.h>
  11:main.c        **** #include <avr/io.h>
  12:main.c        **** #include <avr/interrupt.h>
  13:main.c        **** #include <util/delay.h>
  14:main.c        **** #include "uart.h"
  15:main.c        **** #include "debug.h"
  16:main.c        **** 
  17:main.c        **** /********************************************
  18:main.c        ****  *  Change these values to change operation *
  19:main.c        ****  ********************************************/
  20:main.c        **** 
  21:main.c        **** #define UPDATES_PER_MINUTE (100)
  22:main.c        **** #define UART_BAUD_RATE (9600)
  23:main.c        **** #define DEBUG LEVEL_0
  24:main.c        **** 
  25:main.c        **** /********************************************
  26:main.c        ****  *  Utility #define statements              *
  27:main.c        ****  ********************************************/
  28:main.c        **** 
  29:main.c        **** #define CYCLES_PER_OVERFLOW (1UL << 16)
  30:main.c        **** #define MILIHERTZ_PER_CYCLE (16000000000ULL)
  31:main.c        **** #define STR_LEN (50)
  32:main.c        **** #define SEC_PER_MIN (60)
  33:main.c        **** #define TOV_PER_SEC (244)
  34:main.c        **** #define DISPLAY_MUX_CONSTANT ((UPDATES_PER_MINUTE / SEC_PER_MIN) * TOV_PER_SEC)
  35:main.c        **** 
  36:main.c        **** /********************************************
  37:main.c        ****  *  Calibration *
  38:main.c        ****  ********************************************/
  39:main.c        **** 
  40:main.c        **** // See spreadsheet for experimental Hz to GPH determination
  41:main.c        **** // https://tinyurl.com/zdstpnf
  42:main.c        **** #define MILLIHZ_TO_MILLIGPH (6.109 * millihertz + 0.000128)
  43:main.c        **** 
  44:main.c        **** typedef enum {
  45:main.c        ****     WAITING,
  46:main.c        ****     COUNTING,
  47:main.c        ****     DISPLAYING
  48:main.c        **** } State;
  49:main.c        **** 
  50:main.c        **** 
  51:main.c        **** /********************************************
  52:main.c        ****  *  Globals                                 *
  53:main.c        ****  ********************************************/
  54:main.c        **** 
  55:main.c        **** // Volatile shared memory
  56:main.c        **** volatile uint16_t displayMuxCount;
  57:main.c        **** volatile uint32_t overflows;
  58:main.c        **** volatile uint32_t cyclesElapsed;
  59:main.c        **** volatile State state;
  60:main.c        **** 
  61:main.c        **** // Nonvolatile globals
  62:main.c        **** char displayString[STR_LEN];
  63:main.c        **** uint8_t charsPrinted;
  64:main.c        **** 
  65:main.c        **** /********************************************
  66:main.c        ****  *  Function Prototypes                     *
  67:main.c        ****  ********************************************/
  68:main.c        **** 
  69:main.c        **** void init(void);
  70:main.c        **** void initInputs(void);
  71:main.c        **** void initINT0(void);
  72:main.c        **** void initTimer(void);
  73:main.c        **** void loop(void);
  74:main.c        **** 
  75:main.c        **** /********************************************
  76:main.c        ****  *  Function Definitions                    *
  77:main.c        ****  ********************************************/
  78:main.c        **** 
  79:main.c        **** int main(void) {
  80:main.c        ****     init();
  81:main.c        ****     
  82:main.c        ****     while(1) {
  83:main.c        ****         loop();
  84:main.c        ****     }
  85:main.c        **** }
  86:main.c        **** 
  87:main.c        **** void init(void) {
  88:main.c        ****     initInputs();
  89:main.c        ****     initINT0();
  90:main.c        ****     initTimer();
  91:main.c        ****     uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU)); 
  92:main.c        ****     if (DEBUG != LEVEL_0) {
  93:main.c        ****         uart_puts("Flow Meter\nDylan Kirkby\n\n");
  94:main.c        ****     }
  95:main.c        ****     displayMuxCount = 0;
  96:main.c        ****     sei();
  97:main.c        **** }
  98:main.c        **** 
  99:main.c        **** void initInputs(void) {
  18               		.loc 1 99 0
  19               		.cfi_startproc
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
 100:main.c        ****     // Set PD2 (INT0 pin) as an input (no pull-up)
 101:main.c        ****     DDRD &= ~(1 << PD2);
  24               		.loc 1 101 0
  25 0000 5298      		cbi 42-32,2
 102:main.c        **** 
 103:main.c        ****     // Set PD3 as an output
 104:main.c        ****     DDRD |= (1 << PD3);
  26               		.loc 1 104 0
  27 0002 539A      		sbi 42-32,3
  28               	/* epilogue start */
 105:main.c        **** }
  29               		.loc 1 105 0
  30 0004 0895      		ret
  31               		.cfi_endproc
  32               	.LFE9:
  34               	.global	initINT0
  36               	initINT0:
  37               	.LFB10:
 106:main.c        **** 
 107:main.c        **** void initINT0(void) {
  38               		.loc 1 107 0
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
 108:main.c        ****     // Rising edge of INT0 (PD2) generates interrupt request
 109:main.c        ****     EICRA |= (1 << ISC01);
  44               		.loc 1 109 0
  45 0006 E9E6      		ldi r30,lo8(105)
  46 0008 F0E0      		ldi r31,hi8(105)
  47 000a 8081      		ld r24,Z
  48 000c 8260      		ori r24,lo8(2)
  49 000e 8083      		st Z,r24
 110:main.c        ****     EICRA &= ~(1 << ISC00);     // EICRA = 0bXXXXXX10
  50               		.loc 1 110 0
  51 0010 8081      		ld r24,Z
  52 0012 8E7F      		andi r24,lo8(-2)
  53 0014 8083      		st Z,r24
 111:main.c        **** 
 112:main.c        ****     // Enable INT0 Interrupt
 113:main.c        ****     EIMSK |= (1 << INT0);       // EIMSK = 0bXXXXXXX1
  54               		.loc 1 113 0
  55 0016 E89A      		sbi 61-32,0
  56               	/* epilogue start */
 114:main.c        **** }
  57               		.loc 1 114 0
  58 0018 0895      		ret
  59               		.cfi_endproc
  60               	.LFE10:
  62               	.global	initTimer
  64               	initTimer:
  65               	.LFB11:
 115:main.c        **** 
 116:main.c        **** void initTimer(void) {
  66               		.loc 1 116 0
  67               		.cfi_startproc
  68               	/* prologue: function */
  69               	/* frame size = 0 */
  70               	/* stack size = 0 */
  71               	.L__stack_usage = 0
 117:main.c        ****     // Set Prescaler to 1
 118:main.c        ****     TCCR1B |= (1 << CS10);
  72               		.loc 1 118 0
  73 001a E1E8      		ldi r30,lo8(129)
  74 001c F0E0      		ldi r31,hi8(129)
  75 001e 8081      		ld r24,Z
  76 0020 8160      		ori r24,lo8(1)
  77 0022 8083      		st Z,r24
 119:main.c        ****     TCCR1B &= ~(1 << CS12);     // TCCR1B = 0bXXXXX0X1
  78               		.loc 1 119 0
  79 0024 8081      		ld r24,Z
  80 0026 8B7F      		andi r24,lo8(-5)
  81 0028 8083      		st Z,r24
 120:main.c        **** 
 121:main.c        ****     // Enable Overflow Interrupt
 122:main.c        ****     TIMSK1 |= (1 << TOIE1);
  82               		.loc 1 122 0
  83 002a EFE6      		ldi r30,lo8(111)
  84 002c F0E0      		ldi r31,hi8(111)
  85 002e 8081      		ld r24,Z
  86 0030 8160      		ori r24,lo8(1)
  87 0032 8083      		st Z,r24
  88               	/* epilogue start */
 123:main.c        **** }
  89               		.loc 1 123 0
  90 0034 0895      		ret
  91               		.cfi_endproc
  92               	.LFE11:
  94               	.global	init
  96               	init:
  97               	.LFB8:
  87:main.c        **** void init(void) {
  98               		.loc 1 87 0
  99               		.cfi_startproc
 100               	/* prologue: function */
 101               	/* frame size = 0 */
 102               	/* stack size = 0 */
 103               	.L__stack_usage = 0
  88:main.c        ****     initInputs();
 104               		.loc 1 88 0
 105 0036 0E94 0000 		call initInputs
  89:main.c        ****     initINT0();
 106               		.loc 1 89 0
 107 003a 0E94 0000 		call initINT0
  90:main.c        ****     initTimer();
 108               		.loc 1 90 0
 109 003e 0E94 0000 		call initTimer
  91:main.c        ****     uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU)); 
 110               		.loc 1 91 0
 111 0042 87E6      		ldi r24,lo8(103)
 112 0044 90E0      		ldi r25,hi8(103)
 113 0046 0E94 0000 		call uart_init
  95:main.c        ****     displayMuxCount = 0;
 114               		.loc 1 95 0
 115 004a 1092 0000 		sts displayMuxCount+1,__zero_reg__
 116 004e 1092 0000 		sts displayMuxCount,__zero_reg__
  96:main.c        ****     sei();
 117               		.loc 1 96 0
 118               	/* #APP */
 119               	 ;  96 "main.c" 1
 120 0052 7894      		sei
 121               	 ;  0 "" 2
 122               	/* epilogue start */
  97:main.c        **** }
 123               		.loc 1 97 0
 124               	/* #NOAPP */
 125 0054 0895      		ret
 126               		.cfi_endproc
 127               	.LFE8:
 129               		.data
 130               	.LC0:
 131 0000 256C 752E 		.string	"%lu."
 131      00
 132               	.LC1:
 133 0005 2530 336C 		.string	"%03lu GPH\n"
 133      7520 4750 
 133      480A 00
 134               		.text
 135               	.global	loop
 137               	loop:
 138               	.LFB12:
 124:main.c        **** 
 125:main.c        **** // 16000000 cycles = 1.000 Hz = 1,000 mHz
 126:main.c        **** // 1600000 cycles = 10.000 Hz = 10,000 mHz
 127:main.c        **** // 160000 cycles = 100.000 Hz = 100,000 mHz
 128:main.c        **** // 16000 cycles = 1000.000 Hz = 1000,000 mHz
 129:main.c        **** // frequency (mHz) = 16,000,000,000 / cycles 
 130:main.c        **** 
 131:main.c        **** void loop(void) {
 139               		.loc 1 131 0
 140               		.cfi_startproc
 141 0056 2F92      		push r2
 142               	.LCFI0:
 143               		.cfi_def_cfa_offset 3
 144               		.cfi_offset 2, -2
 145 0058 3F92      		push r3
 146               	.LCFI1:
 147               		.cfi_def_cfa_offset 4
 148               		.cfi_offset 3, -3
 149 005a 4F92      		push r4
 150               	.LCFI2:
 151               		.cfi_def_cfa_offset 5
 152               		.cfi_offset 4, -4
 153 005c 5F92      		push r5
 154               	.LCFI3:
 155               		.cfi_def_cfa_offset 6
 156               		.cfi_offset 5, -5
 157 005e 6F92      		push r6
 158               	.LCFI4:
 159               		.cfi_def_cfa_offset 7
 160               		.cfi_offset 6, -6
 161 0060 7F92      		push r7
 162               	.LCFI5:
 163               		.cfi_def_cfa_offset 8
 164               		.cfi_offset 7, -7
 165 0062 8F92      		push r8
 166               	.LCFI6:
 167               		.cfi_def_cfa_offset 9
 168               		.cfi_offset 8, -8
 169 0064 9F92      		push r9
 170               	.LCFI7:
 171               		.cfi_def_cfa_offset 10
 172               		.cfi_offset 9, -9
 173 0066 AF92      		push r10
 174               	.LCFI8:
 175               		.cfi_def_cfa_offset 11
 176               		.cfi_offset 10, -10
 177 0068 BF92      		push r11
 178               	.LCFI9:
 179               		.cfi_def_cfa_offset 12
 180               		.cfi_offset 11, -11
 181 006a CF92      		push r12
 182               	.LCFI10:
 183               		.cfi_def_cfa_offset 13
 184               		.cfi_offset 12, -12
 185 006c DF92      		push r13
 186               	.LCFI11:
 187               		.cfi_def_cfa_offset 14
 188               		.cfi_offset 13, -13
 189 006e EF92      		push r14
 190               	.LCFI12:
 191               		.cfi_def_cfa_offset 15
 192               		.cfi_offset 14, -14
 193 0070 FF92      		push r15
 194               	.LCFI13:
 195               		.cfi_def_cfa_offset 16
 196               		.cfi_offset 15, -15
 197 0072 0F93      		push r16
 198               	.LCFI14:
 199               		.cfi_def_cfa_offset 17
 200               		.cfi_offset 16, -16
 201 0074 1F93      		push r17
 202               	.LCFI15:
 203               		.cfi_def_cfa_offset 18
 204               		.cfi_offset 17, -17
 205 0076 CF93      		push r28
 206               	.LCFI16:
 207               		.cfi_def_cfa_offset 19
 208               		.cfi_offset 28, -18
 209 0078 DF93      		push r29
 210               	.LCFI17:
 211               		.cfi_def_cfa_offset 20
 212               		.cfi_offset 29, -19
 213               	/* prologue: function */
 214               	/* frame size = 0 */
 215               	/* stack size = 18 */
 216               	.L__stack_usage = 18
 132:main.c        ****     State nextState;
 133:main.c        ****     uint32_t millihertz;
 134:main.c        ****     uint32_t milliGPH;
 135:main.c        ****     uint32_t integerPart;
 136:main.c        ****     uint32_t fractionalPart;
 137:main.c        **** 
 138:main.c        ****     if (state == DISPLAYING) {
 217               		.loc 1 138 0
 218 007a 8091 0000 		lds r24,state
 219 007e 8230      		cpi r24,lo8(2)
 220 0080 01F0      		breq .+2
 221 0082 00C0      		rjmp .L6
 139:main.c        ****         // Display Data
 140:main.c        ****         millihertz = MILIHERTZ_PER_CYCLE / cyclesElapsed;
 222               		.loc 1 140 0
 223 0084 C090 0000 		lds r12,cyclesElapsed
 224 0088 D090 0000 		lds r13,cyclesElapsed+1
 225 008c E090 0000 		lds r14,cyclesElapsed+2
 226 0090 F090 0000 		lds r15,cyclesElapsed+3
 227               	.LVL0:
 141:main.c        **** 
 142:main.c        ****         milliGPH = MILLIHZ_TO_MILLIGPH;
 143:main.c        **** 
 144:main.c        ****         if (DEBUG == LEVEL_0 && (uart_getc() != UART_NO_DATA)) {
 228               		.loc 1 144 0
 229 0094 0E94 0000 		call uart_getc
 230 0098 21E0      		ldi r18,hi8(256)
 231 009a 8030      		cpi r24,lo8(256)
 232 009c 9207      		cpc r25,r18
 233 009e 01F4      		brne .+2
 234 00a0 00C0      		rjmp .L8
 140:main.c        ****         millihertz = MILIHERTZ_PER_CYCLE / cyclesElapsed;
 235               		.loc 1 140 0
 236 00a2 1601      		movw r2,r12
 237 00a4 2701      		movw r4,r14
 238 00a6 20E0      		ldi r18,lo8(0)
 239 00a8 30EA      		ldi r19,lo8(-96)
 240 00aa 4CEA      		ldi r20,lo8(-84)
 241 00ac 59EB      		ldi r21,lo8(-71)
 242 00ae 63E0      		ldi r22,lo8(3)
 243 00b0 70E0      		ldi r23,lo8(0)
 244 00b2 80E0      		ldi r24,lo8(0)
 245 00b4 90E0      		ldi r25,lo8(0)
 246 00b6 5601      		movw r10,r12
 247 00b8 6201      		movw r12,r4
 248               	.LVL1:
 249 00ba EE24      		clr r14
 250 00bc FF24      		clr r15
 251 00be 00E0      		ldi r16,lo8(0)
 252 00c0 10E0      		ldi r17,lo8(0)
 253 00c2 0E94 0000 		call __udivdi3
 142:main.c        ****         milliGPH = MILLIHZ_TO_MILLIGPH;
 254               		.loc 1 142 0
 255 00c6 B901      		movw r22,r18
 256 00c8 CA01      		movw r24,r20
 257 00ca 0E94 0000 		call __floatunsisf
 258 00ce 2EEE      		ldi r18,lo8(0x40c37cee)
 259 00d0 3CE7      		ldi r19,hi8(0x40c37cee)
 260 00d2 43EC      		ldi r20,hlo8(0x40c37cee)
 261 00d4 50E4      		ldi r21,hhi8(0x40c37cee)
 262 00d6 0E94 0000 		call __mulsf3
 263 00da 2DEB      		ldi r18,lo8(0x390637bd)
 264 00dc 37E3      		ldi r19,hi8(0x390637bd)
 265 00de 46E0      		ldi r20,hlo8(0x390637bd)
 266 00e0 59E3      		ldi r21,hhi8(0x390637bd)
 267 00e2 0E94 0000 		call __addsf3
 268 00e6 0E94 0000 		call __fixunssfsi
 269 00ea 582F      		mov r21,r24
 270 00ec 492F      		mov r20,r25
 271               	.LVL2:
 272               	.LBB2:
 145:main.c        ****             // uart_putc(rx);
 146:main.c        ****             integerPart = milliGPH / 1000;
 147:main.c        ****             fractionalPart = milliGPH % 1000;
 148:main.c        ****             sprintf(displayString, "%lu.", integerPart);
 273               		.loc 1 148 0
 274 00ee 8DB7      		in r24,__SP_L__
 275 00f0 9EB7      		in r25,__SP_H__
 276               	.LVL3:
 277 00f2 0897      		sbiw r24,8
 278 00f4 0FB6      		in __tmp_reg__,__SREG__
 279 00f6 F894      		cli
 280 00f8 9EBF      		out __SP_H__,r25
 281 00fa 0FBE      		out __SREG__,__tmp_reg__
 282 00fc 8DBF      		out __SP_L__,r24
 283 00fe 2DB6      		in r2,__SP_L__
 284 0100 3EB6      		in r3,__SP_H__
 285               	.LVL4:
 286 0102 0894      		sec
 287 0104 211C      		adc r2,__zero_reg__
 288 0106 311C      		adc r3,__zero_reg__
 289 0108 C0E0      		ldi r28,lo8(displayString)
 290 010a D0E0      		ldi r29,hi8(displayString)
 291 010c ADB7      		in r26,__SP_L__
 292 010e BEB7      		in r27,__SP_H__
 293 0110 1296      		adiw r26,1+1
 294 0112 DC93      		st X,r29
 295 0114 CE93      		st -X,r28
 296 0116 1197      		sbiw r26,1
 297 0118 20E0      		ldi r18,lo8(.LC0)
 298 011a 30E0      		ldi r19,hi8(.LC0)
 299 011c F101      		movw r30,r2
 300 011e 3383      		std Z+3,r19
 301 0120 2283      		std Z+2,r18
 146:main.c        ****             integerPart = milliGPH / 1000;
 302               		.loc 1 146 0
 303 0122 852F      		mov r24,r21
 304 0124 942F      		mov r25,r20
 305               	.LVL5:
 306 0126 28EE      		ldi r18,lo8(1000)
 307 0128 33E0      		ldi r19,hi8(1000)
 308 012a 40E0      		ldi r20,hlo8(1000)
 309 012c 50E0      		ldi r21,hhi8(1000)
 310 012e 0E94 0000 		call __udivmodsi4
 311               	.LVL6:
 312 0132 6B01      		movw r12,r22
 313 0134 7C01      		movw r14,r24
 314               		.loc 1 148 0
 315 0136 D101      		movw r26,r2
 316 0138 1496      		adiw r26,4
 317 013a 2D93      		st X+,r18
 318 013c 3D93      		st X+,r19
 319 013e 4D93      		st X+,r20
 320 0140 5C93      		st X,r21
 321 0142 1797      		sbiw r26,4+3
 322 0144 0E94 0000 		call sprintf
 149:main.c        ****             uart_puts(displayString);
 323               		.loc 1 149 0
 324 0148 EDB7      		in r30,__SP_L__
 325 014a FEB7      		in r31,__SP_H__
 326 014c 3896      		adiw r30,8
 327 014e 0FB6      		in __tmp_reg__,__SREG__
 328 0150 F894      		cli
 329 0152 FEBF      		out __SP_H__,r31
 330 0154 0FBE      		out __SREG__,__tmp_reg__
 331 0156 EDBF      		out __SP_L__,r30
 332 0158 CE01      		movw r24,r28
 333 015a 0E94 0000 		call uart_puts
 150:main.c        ****             charsPrinted += strlen(displayString);
 334               		.loc 1 150 0
 335 015e FE01      		movw r30,r28
 336 0160 0190      		ld __tmp_reg__,Z+
 337 0162 0020      		tst __tmp_reg__
 338 0164 01F4      		brne .-6
 339 0166 3197      		sbiw r30,1
 340 0168 EC1B      		sub r30,r28
 341 016a FD0B      		sbc r31,r29
 342 016c 8091 0000 		lds r24,charsPrinted
 343 0170 8E0F      		add r24,r30
 344 0172 8093 0000 		sts charsPrinted,r24
 151:main.c        ****             sprintf(displayString, "%03lu GPH\n", fractionalPart);
 345               		.loc 1 151 0
 346 0176 8DB7      		in r24,__SP_L__
 347 0178 9EB7      		in r25,__SP_H__
 348 017a 0897      		sbiw r24,8
 349 017c 0FB6      		in __tmp_reg__,__SREG__
 350 017e F894      		cli
 351 0180 9EBF      		out __SP_H__,r25
 352 0182 0FBE      		out __SREG__,__tmp_reg__
 353 0184 8DBF      		out __SP_L__,r24
 354 0186 EDB7      		in r30,__SP_L__
 355 0188 FEB7      		in r31,__SP_H__
 356 018a 3196      		adiw r30,1
 357 018c ADB7      		in r26,__SP_L__
 358 018e BEB7      		in r27,__SP_H__
 359 0190 1296      		adiw r26,1+1
 360 0192 DC93      		st X,r29
 361 0194 CE93      		st -X,r28
 362 0196 1197      		sbiw r26,1
 363 0198 80E0      		ldi r24,lo8(.LC1)
 364 019a 90E0      		ldi r25,hi8(.LC1)
 365 019c 9383      		std Z+3,r25
 366 019e 8283      		std Z+2,r24
 367 01a0 C482      		std Z+4,r12
 368 01a2 D582      		std Z+5,r13
 369 01a4 E682      		std Z+6,r14
 370 01a6 F782      		std Z+7,r15
 371 01a8 0E94 0000 		call sprintf
 152:main.c        ****             uart_puts(displayString);
 372               		.loc 1 152 0
 373 01ac EDB7      		in r30,__SP_L__
 374 01ae FEB7      		in r31,__SP_H__
 375 01b0 3896      		adiw r30,8
 376 01b2 0FB6      		in __tmp_reg__,__SREG__
 377 01b4 F894      		cli
 378 01b6 FEBF      		out __SP_H__,r31
 379 01b8 0FBE      		out __SREG__,__tmp_reg__
 380 01ba EDBF      		out __SP_L__,r30
 381 01bc CE01      		movw r24,r28
 382 01be 0E94 0000 		call uart_puts
 153:main.c        ****             charsPrinted += strlen(displayString);
 383               		.loc 1 153 0
 384 01c2 0990      		ld __tmp_reg__,Y+
 385 01c4 0020      		tst __tmp_reg__
 386 01c6 01F4      		brne .-6
 387 01c8 2197      		sbiw r28,1
 388 01ca C050      		subi r28,lo8(displayString)
 389 01cc D040      		sbci r29,hi8(displayString)
 390 01ce 8091 0000 		lds r24,charsPrinted
 391 01d2 8C0F      		add r24,r28
 392 01d4 8093 0000 		sts charsPrinted,r24
 393 01d8 00C0      		rjmp .L8
 394               	.L6:
 395               	.LBE2:
 154:main.c        ****         }
 155:main.c        **** 
 156:main.c        ****         if (!DEBUG == LEVEL_0 && displayMuxCount == DISPLAY_MUX_CONSTANT) {
 157:main.c        ****             integerPart = milliGPH / 1000;
 158:main.c        ****             fractionalPart = milliGPH % 1000;
 159:main.c        ****             sprintf(displayString, "%lu.", integerPart);
 160:main.c        ****             uart_puts(displayString);
 161:main.c        ****             charsPrinted += strlen(displayString);
 162:main.c        ****             sprintf(displayString, "%03lu GPH\n", fractionalPart);
 163:main.c        ****             uart_puts(displayString);
 164:main.c        ****             charsPrinted += strlen(displayString);
 165:main.c        **** 
 166:main.c        ****             if (DEBUG == LEVEL_2) {
 167:main.c        ****                 integerPart = millihertz / 1000;
 168:main.c        ****                 fractionalPart = millihertz % 1000;
 169:main.c        ****                 sprintf(displayString, "%lu.", integerPart);
 170:main.c        ****                 uart_puts(displayString);
 171:main.c        ****                 sprintf(displayString, "%03lu Hz\n", fractionalPart);
 172:main.c        ****                 uart_puts(displayString);
 173:main.c        **** 
 174:main.c        ****                 sprintf(displayString, "%lu\n", cyclesElapsed);
 175:main.c        ****                 uart_puts(displayString);
 176:main.c        ****                 sprintf(displayString, "%lu\n", overflows);
 177:main.c        ****                 uart_puts(displayString);                   
 178:main.c        ****             }
 179:main.c        **** 
 180:main.c        ****             // Reset count
 181:main.c        ****             displayMuxCount = 0;
 182:main.c        ****             
 183:main.c        ****         }
 184:main.c        **** 
 185:main.c        ****         nextState = WAITING;
 186:main.c        ****     }
 187:main.c        ****     else {
 188:main.c        ****         nextState = state;
 396               		.loc 1 188 0
 397 01da 8091 0000 		lds r24,state
 398               	.LVL7:
 399 01de 00C0      		rjmp .L7
 400               	.LVL8:
 401               	.L8:
 185:main.c        ****         nextState = WAITING;
 402               		.loc 1 185 0
 403 01e0 80E0      		ldi r24,lo8(0)
 404               	.L7:
 405               	.LVL9:
 189:main.c        ****     }
 190:main.c        **** 
 191:main.c        ****     state = nextState;
 406               		.loc 1 191 0
 407 01e2 8093 0000 		sts state,r24
 408               	/* epilogue start */
 192:main.c        **** }
 409               		.loc 1 192 0
 410 01e6 DF91      		pop r29
 411 01e8 CF91      		pop r28
 412 01ea 1F91      		pop r17
 413 01ec 0F91      		pop r16
 414 01ee FF90      		pop r15
 415 01f0 EF90      		pop r14
 416 01f2 DF90      		pop r13
 417 01f4 CF90      		pop r12
 418 01f6 BF90      		pop r11
 419 01f8 AF90      		pop r10
 420 01fa 9F90      		pop r9
 421 01fc 8F90      		pop r8
 422 01fe 7F90      		pop r7
 423 0200 6F90      		pop r6
 424 0202 5F90      		pop r5
 425 0204 4F90      		pop r4
 426 0206 3F90      		pop r3
 427 0208 2F90      		pop r2
 428 020a 0895      		ret
 429               		.cfi_endproc
 430               	.LFE12:
 432               		.section	.text.startup,"ax",@progbits
 433               	.global	main
 435               	main:
 436               	.LFB7:
  79:main.c        **** int main(void) {
 437               		.loc 1 79 0
 438               		.cfi_startproc
 439               	/* prologue: function */
 440               	/* frame size = 0 */
 441               	/* stack size = 0 */
 442               	.L__stack_usage = 0
  80:main.c        ****     init();
 443               		.loc 1 80 0
 444 0000 0E94 0000 		call init
 445               	.L10:
  83:main.c        ****         loop();
 446               		.loc 1 83 0 discriminator 1
 447 0004 0E94 0000 		call loop
 448 0008 00C0      		rjmp .L10
 449               		.cfi_endproc
 450               	.LFE7:
 452               		.text
 453               	.global	__vector_13
 455               	__vector_13:
 456               	.LFB13:
 193:main.c        **** 
 194:main.c        **** /********************************************
 195:main.c        ****  *  Interrupt Service Routines              *
 196:main.c        ****  ********************************************/
 197:main.c        **** 
 198:main.c        **** // Timer Overflow Interrupt (occurs once every 2^16 cycles = .004096 seconds = 244 times per second
 199:main.c        **** ISR(TIMER1_OVF_vect) {
 457               		.loc 1 199 0
 458               		.cfi_startproc
 459 020c 1F92      		push r1
 460               	.LCFI18:
 461               		.cfi_def_cfa_offset 3
 462               		.cfi_offset 1, -2
 463 020e 0F92      		push r0
 464               	.LCFI19:
 465               		.cfi_def_cfa_offset 4
 466               		.cfi_offset 0, -3
 467 0210 0FB6      		in r0,__SREG__
 468 0212 0F92      		push r0
 469 0214 1124      		clr __zero_reg__
 470 0216 8F93      		push r24
 471               	.LCFI20:
 472               		.cfi_def_cfa_offset 5
 473               		.cfi_offset 24, -4
 474 0218 9F93      		push r25
 475               	.LCFI21:
 476               		.cfi_def_cfa_offset 6
 477               		.cfi_offset 25, -5
 478 021a AF93      		push r26
 479               	.LCFI22:
 480               		.cfi_def_cfa_offset 7
 481               		.cfi_offset 26, -6
 482 021c BF93      		push r27
 483               	.LCFI23:
 484               		.cfi_def_cfa_offset 8
 485               		.cfi_offset 27, -7
 486               	/* prologue: Signal */
 487               	/* frame size = 0 */
 488               	/* stack size = 7 */
 489               	.L__stack_usage = 7
 200:main.c        ****     ++overflows;
 490               		.loc 1 200 0
 491 021e 8091 0000 		lds r24,overflows
 492 0222 9091 0000 		lds r25,overflows+1
 493 0226 A091 0000 		lds r26,overflows+2
 494 022a B091 0000 		lds r27,overflows+3
 495 022e 0196      		adiw r24,1
 496 0230 A11D      		adc r26,__zero_reg__
 497 0232 B11D      		adc r27,__zero_reg__
 498 0234 8093 0000 		sts overflows,r24
 499 0238 9093 0000 		sts overflows+1,r25
 500 023c A093 0000 		sts overflows+2,r26
 501 0240 B093 0000 		sts overflows+3,r27
 201:main.c        ****     // Update the display UPDATES_PER_MINUTE times per minute
 202:main.c        ****     displayMuxCount = (displayMuxCount >= DISPLAY_MUX_CONSTANT) ? displayMuxCount : displayMuxCount
 502               		.loc 1 202 0
 503 0244 8091 0000 		lds r24,displayMuxCount
 504 0248 9091 0000 		lds r25,displayMuxCount+1
 505 024c 843F      		cpi r24,244
 506 024e 9105      		cpc r25,__zero_reg__
 507 0250 00F0      		brlo .L12
 508               		.loc 1 202 0 is_stmt 0 discriminator 1
 509 0252 8091 0000 		lds r24,displayMuxCount
 510 0256 9091 0000 		lds r25,displayMuxCount+1
 511 025a 00C0      		rjmp .L13
 512               	.L12:
 513               		.loc 1 202 0 discriminator 2
 514 025c 8091 0000 		lds r24,displayMuxCount
 515 0260 9091 0000 		lds r25,displayMuxCount+1
 516 0264 0196      		adiw r24,1
 517               	.L13:
 518               		.loc 1 202 0 discriminator 3
 519 0266 9093 0000 		sts displayMuxCount+1,r25
 520 026a 8093 0000 		sts displayMuxCount,r24
 521               	/* epilogue start */
 203:main.c        **** }
 522               		.loc 1 203 0 is_stmt 1 discriminator 3
 523 026e BF91      		pop r27
 524 0270 AF91      		pop r26
 525 0272 9F91      		pop r25
 526 0274 8F91      		pop r24
 527 0276 0F90      		pop r0
 528 0278 0FBE      		out __SREG__,r0
 529 027a 0F90      		pop r0
 530 027c 1F90      		pop r1
 531 027e 1895      		reti
 532               		.cfi_endproc
 533               	.LFE13:
 535               	.global	__vector_1
 537               	__vector_1:
 538               	.LFB14:
 204:main.c        **** 
 205:main.c        **** // Falling Edge Interrupt
 206:main.c        **** ISR(INT0_vect) {
 539               		.loc 1 206 0
 540               		.cfi_startproc
 541 0280 1F92      		push r1
 542               	.LCFI24:
 543               		.cfi_def_cfa_offset 3
 544               		.cfi_offset 1, -2
 545 0282 0F92      		push r0
 546               	.LCFI25:
 547               		.cfi_def_cfa_offset 4
 548               		.cfi_offset 0, -3
 549 0284 0FB6      		in r0,__SREG__
 550 0286 0F92      		push r0
 551 0288 1124      		clr __zero_reg__
 552 028a 4F93      		push r20
 553               	.LCFI26:
 554               		.cfi_def_cfa_offset 5
 555               		.cfi_offset 20, -4
 556 028c 5F93      		push r21
 557               	.LCFI27:
 558               		.cfi_def_cfa_offset 6
 559               		.cfi_offset 21, -5
 560 028e 6F93      		push r22
 561               	.LCFI28:
 562               		.cfi_def_cfa_offset 7
 563               		.cfi_offset 22, -6
 564 0290 7F93      		push r23
 565               	.LCFI29:
 566               		.cfi_def_cfa_offset 8
 567               		.cfi_offset 23, -7
 568 0292 8F93      		push r24
 569               	.LCFI30:
 570               		.cfi_def_cfa_offset 9
 571               		.cfi_offset 24, -8
 572 0294 9F93      		push r25
 573               	.LCFI31:
 574               		.cfi_def_cfa_offset 10
 575               		.cfi_offset 25, -9
 576 0296 AF93      		push r26
 577               	.LCFI32:
 578               		.cfi_def_cfa_offset 11
 579               		.cfi_offset 26, -10
 580 0298 BF93      		push r27
 581               	.LCFI33:
 582               		.cfi_def_cfa_offset 12
 583               		.cfi_offset 27, -11
 584               	/* prologue: Signal */
 585               	/* frame size = 0 */
 586               	/* stack size = 11 */
 587               	.L__stack_usage = 11
 207:main.c        ****     State nextState;
 208:main.c        ****     
 209:main.c        ****     if (state == WAITING) {
 588               		.loc 1 209 0
 589 029a 9091 0000 		lds r25,state
 590 029e 9923      		tst r25
 591 02a0 01F4      		brne .L15
 210:main.c        ****         // Got a falling edge, start counting
 211:main.c        ****         // Reset Timer to zero
 212:main.c        ****         TCNT1 = 0;
 592               		.loc 1 212 0
 593 02a2 1092 8500 		sts 132+1,__zero_reg__
 594 02a6 1092 8400 		sts 132,__zero_reg__
 213:main.c        ****         // Reset overflow count
 214:main.c        ****         overflows = 0;
 595               		.loc 1 214 0
 596 02aa 1092 0000 		sts overflows,__zero_reg__
 597 02ae 1092 0000 		sts overflows+1,__zero_reg__
 598 02b2 1092 0000 		sts overflows+2,__zero_reg__
 599 02b6 1092 0000 		sts overflows+3,__zero_reg__
 215:main.c        ****         // Reset overflow interrupt flag by writing a one to TOV
 216:main.c        ****         TIFR1 |= (1 << TOV1);
 600               		.loc 1 216 0
 601 02ba B09A      		sbi 54-32,0
 602               	.LVL10:
 217:main.c        **** 
 218:main.c        ****         nextState = COUNTING;
 219:main.c        **** 
 220:main.c        ****         // Toggle PD3
 221:main.c        ****         PORTD ^= (1 << PD3);
 603               		.loc 1 221 0
 604 02bc 8BB1      		in r24,43-32
 605 02be 98E0      		ldi r25,lo8(8)
 606 02c0 8927      		eor r24,r25
 607 02c2 8BB9      		out 43-32,r24
 218:main.c        ****         nextState = COUNTING;
 608               		.loc 1 218 0
 609 02c4 81E0      		ldi r24,lo8(1)
 610 02c6 00C0      		rjmp .L16
 611               	.LVL11:
 612               	.L15:
 222:main.c        ****     }
 223:main.c        ****     else if (state == COUNTING) {
 613               		.loc 1 223 0
 614 02c8 9091 0000 		lds r25,state
 615 02cc 9130      		cpi r25,lo8(1)
 616 02ce 01F4      		brne .L17
 224:main.c        ****         cyclesElapsed = TCNT1 + overflows * CYCLES_PER_OVERFLOW;
 617               		.loc 1 224 0
 618 02d0 4091 8400 		lds r20,132
 619 02d4 5091 8500 		lds r21,132+1
 620 02d8 8091 0000 		lds r24,overflows
 621 02dc 9091 0000 		lds r25,overflows+1
 622 02e0 A091 0000 		lds r26,overflows+2
 623 02e4 B091 0000 		lds r27,overflows+3
 624 02e8 DC01      		movw r26,r24
 625 02ea 9927      		clr r25
 626 02ec 8827      		clr r24
 627 02ee 60E0      		ldi r22,lo8(0)
 628 02f0 70E0      		ldi r23,hi8(0)
 629 02f2 840F      		add r24,r20
 630 02f4 951F      		adc r25,r21
 631 02f6 A61F      		adc r26,r22
 632 02f8 B71F      		adc r27,r23
 633 02fa 8093 0000 		sts cyclesElapsed,r24
 634 02fe 9093 0000 		sts cyclesElapsed+1,r25
 635 0302 A093 0000 		sts cyclesElapsed+2,r26
 636 0306 B093 0000 		sts cyclesElapsed+3,r27
 637               	.LVL12:
 225:main.c        ****         // Got a falling edge, stop counting and display results
 226:main.c        ****         nextState = DISPLAYING;
 227:main.c        **** 
 228:main.c        ****         // Toggle PD3
 229:main.c        ****         PORTD ^= (1 << PD3);
 638               		.loc 1 229 0
 639 030a 8BB1      		in r24,43-32
 640 030c 98E0      		ldi r25,lo8(8)
 641 030e 8927      		eor r24,r25
 642 0310 8BB9      		out 43-32,r24
 226:main.c        ****         nextState = DISPLAYING;
 643               		.loc 1 226 0
 644 0312 82E0      		ldi r24,lo8(2)
 645 0314 00C0      		rjmp .L16
 646               	.LVL13:
 647               	.L17:
 230:main.c        ****     }
 231:main.c        ****     else if (state == DISPLAYING) {
 648               		.loc 1 231 0
 649 0316 9091 0000 		lds r25,state
 650 031a 9230      		cpi r25,lo8(2)
 651 031c 01F0      		breq .L16
 232:main.c        **** 
 233:main.c        ****     }
 234:main.c        ****     else {
 235:main.c        ****         // Unknown state
 236:main.c        ****         nextState = WAITING;
 652               		.loc 1 236 0
 653 031e 80E0      		ldi r24,lo8(0)
 654               	.L16:
 655               	.LVL14:
 237:main.c        ****     }
 238:main.c        ****     
 239:main.c        ****     state = nextState;
 656               		.loc 1 239 0
 657 0320 8093 0000 		sts state,r24
 658               	/* epilogue start */
 240:main.c        **** 
 241:main.c        **** 
 242:main.c        **** }
 659               		.loc 1 242 0
 660 0324 BF91      		pop r27
 661 0326 AF91      		pop r26
 662 0328 9F91      		pop r25
 663 032a 8F91      		pop r24
 664               	.LVL15:
 665 032c 7F91      		pop r23
 666 032e 6F91      		pop r22
 667 0330 5F91      		pop r21
 668 0332 4F91      		pop r20
 669 0334 0F90      		pop r0
 670 0336 0FBE      		out __SREG__,r0
 671 0338 0F90      		pop r0
 672 033a 1F90      		pop r1
 673 033c 1895      		reti
 674               		.cfi_endproc
 675               	.LFE14:
 677               		.comm charsPrinted,1,1
 678               		.comm displayString,50,1
 679               		.comm state,1,1
 680               		.comm cyclesElapsed,4,1
 681               		.comm overflows,4,1
 682               		.comm displayMuxCount,2,1
 683               	.Letext0:
 684               		.file 2 "/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
 685               		.file 3 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
              main.s:2      *ABS*:0000003f __SREG__
              main.s:3      *ABS*:0000003e __SP_H__
              main.s:4      *ABS*:0000003d __SP_L__
              main.s:5      *ABS*:00000034 __CCP__
              main.s:6      *ABS*:00000000 __tmp_reg__
              main.s:7      *ABS*:00000001 __zero_reg__
              main.s:15     .text:00000000 initInputs
              main.s:36     .text:00000006 initINT0
              main.s:64     .text:0000001a initTimer
              main.s:96     .text:00000036 init
                            *COM*:00000002 displayMuxCount
              main.s:137    .text:00000056 loop
                            *COM*:00000001 state
                            *COM*:00000004 cyclesElapsed
                            *COM*:00000032 displayString
                            *COM*:00000001 charsPrinted
              main.s:435    .text.startup:00000000 main
              main.s:455    .text:0000020c __vector_13
                            *COM*:00000004 overflows
              main.s:537    .text:00000280 __vector_1

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
uart_init
uart_getc
__udivdi3
__floatunsisf
__mulsf3
__addsf3
__fixunssfsi
__udivmodsi4
sprintf
uart_puts
