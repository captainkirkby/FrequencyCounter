
freq_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000a5c  00000ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000c84  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000019d  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00001908  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000136b  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000741  00000000  00000000  00002df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000923  00000000  00000000  00003534  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  00003e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a9c  00000000  00000000  00004407  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00004ea3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  9e:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  a6:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
  b0:	5e 98       	cbi	0x0b, 6	; 11
}
  b2:	08 95       	ret

000000b4 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	0f 92       	push	r0
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
  c0:	66 23       	and	r22, r22
  c2:	11 f0       	breq	.+4      	; 0xc8 <lcd_write+0x14>
       lcd_rs_high();
  c4:	5c 9a       	sbi	0x0b, 4	; 11
  c6:	01 c0       	rjmp	.+2      	; 0xca <lcd_write+0x16>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  c8:	5c 98       	cbi	0x0b, 4	; 11
    }
    lcd_rw_low();    /* RW=0  write mode      */
  ca:	5d 98       	cbi	0x0b, 5	; 11

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
  cc:	9a b1       	in	r25, 0x0a	; 10
  ce:	9f 60       	ori	r25, 0x0F	; 15
  d0:	9a b9       	out	0x0a, r25	; 10

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
  d2:	1b b1       	in	r17, 0x0b	; 11
  d4:	10 7f       	andi	r17, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
  d6:	98 2f       	mov	r25, r24
  d8:	92 95       	swap	r25
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	91 2b       	or	r25, r17
  de:	9b b9       	out	0x0b, r25	; 11
        lcd_e_toggle();
  e0:	89 83       	std	Y+1, r24	; 0x01
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	8f 70       	andi	r24, 0x0F	; 15
  ea:	81 2b       	or	r24, r17
  ec:	8b b9       	out	0x0b, r24	; 11
        lcd_e_toggle();
  ee:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
  f2:	1f 60       	ori	r17, 0x0F	; 15
  f4:	1b b9       	out	0x0b, r17	; 11
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
  f6:	0f 90       	pop	r0
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	08 95       	ret

00000100 <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 100:	5c 98       	cbi	0x0b, 4	; 11
    lcd_rw_high();                           /* RW=1  read mode      */
 102:	5d 9a       	sbi	0x0b, 5	; 11
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	8a b9       	out	0x0a, r24	; 10
        
        lcd_e_high();
 10a:	5e 9a       	sbi	0x0b, 6	; 11
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <lcd_read.constprop.0+0xe>
 112:	00 00       	nop
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 114:	89 b1       	in	r24, 0x09	; 9
        lcd_e_low();
 116:	5e 98       	cbi	0x0b, 6	; 11
 118:	95 e0       	ldi	r25, 0x05	; 5
 11a:	9a 95       	dec	r25
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_read.constprop.0+0x1a>
 11e:	00 00       	nop
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
 120:	5e 9a       	sbi	0x0b, 6	; 11
 122:	95 e0       	ldi	r25, 0x05	; 5
 124:	9a 95       	dec	r25
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_read.constprop.0+0x24>
 128:	00 00       	nop
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 12a:	99 b1       	in	r25, 0x09	; 9
 12c:	9f 70       	andi	r25, 0x0F	; 15
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 12e:	82 95       	swap	r24
 130:	80 7f       	andi	r24, 0xF0	; 240
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
 132:	5e 98       	cbi	0x0b, 6	; 11
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 134:	89 2b       	or	r24, r25
 136:	08 95       	ret

00000138 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 138:	0e 94 80 00 	call	0x100	; 0x100 <lcd_read.constprop.0>
 13c:	87 fd       	sbrc	r24, 7
 13e:	fc cf       	rjmp	.-8      	; 0x138 <lcd_waitbusy>
 140:	85 e1       	ldi	r24, 0x15	; 21
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_waitbusy+0xa>
 146:	00 00       	nop
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 148:	0e 94 80 00 	call	0x100	; 0x100 <lcd_read.constprop.0>
    
}/* lcd_waitbusy */
 14c:	08 95       	ret

0000014e <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 14e:	cf 93       	push	r28
 150:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 152:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_waitbusy>
    lcd_write(cmd,0);
 156:	8c 2f       	mov	r24, r28
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 162:	cf 93       	push	r28
 164:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 166:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_waitbusy>
    lcd_write(data,1);
 16a:	8c 2f       	mov	r24, r28
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
}
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
 176:	66 23       	and	r22, r22
 178:	11 f4       	brne	.+4      	; 0x17e <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 17a:	80 58       	subi	r24, 0x80	; 128
 17c:	09 c0       	rjmp	.+18     	; 0x190 <lcd_gotoxy+0x1a>
    else if ( y==1)
 17e:	61 30       	cpi	r22, 0x01	; 1
 180:	11 f4       	brne	.+4      	; 0x186 <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 182:	80 54       	subi	r24, 0x40	; 64
 184:	05 c0       	rjmp	.+10     	; 0x190 <lcd_gotoxy+0x1a>
    else if ( y==2)
 186:	62 30       	cpi	r22, 0x02	; 2
 188:	11 f4       	brne	.+4      	; 0x18e <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
 18a:	8c 56       	subi	r24, 0x6C	; 108
 18c:	01 c0       	rjmp	.+2      	; 0x190 <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
 18e:	8c 52       	subi	r24, 0x2C	; 44
 190:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
 194:	08 95       	ret

00000196 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 196:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_waitbusy>
}
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	08 95       	ret

0000019e <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
}
 1a4:	08 95       	ret

000001a6 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
}
 1ac:	08 95       	ret

000001ae <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1b2:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_waitbusy>
    if (c=='\n')
 1b6:	ca 30       	cpi	r28, 0x0A	; 10
 1b8:	a1 f4       	brne	.+40     	; 0x1e2 <lcd_putc+0x34>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
 1ba:	84 31       	cpi	r24, 0x14	; 20
 1bc:	48 f0       	brcs	.+18     	; 0x1d0 <lcd_putc+0x22>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
 1be:	98 2f       	mov	r25, r24
 1c0:	90 54       	subi	r25, 0x40	; 64
 1c2:	94 31       	cpi	r25, 0x14	; 20
 1c4:	38 f0       	brcs	.+14     	; 0x1d4 <lcd_putc+0x26>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
 1c6:	84 51       	subi	r24, 0x14	; 20
 1c8:	8c 32       	cpi	r24, 0x2C	; 44
 1ca:	30 f4       	brcc	.+12     	; 0x1d8 <lcd_putc+0x2a>
        addressCounter = LCD_START_LINE4;
 1cc:	84 e5       	ldi	r24, 0x54	; 84
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
 1d0:	80 e4       	ldi	r24, 0x40	; 64
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <lcd_putc+0x2c>
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
 1d4:	84 e1       	ldi	r24, 0x14	; 20
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <lcd_putc+0x2c>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1da:	80 58       	subi	r24, 0x80	; 128
 1dc:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <lcd_putc+0x3c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1e2:	8c 2f       	mov	r24, r28
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
    }

}/* lcd_putc */
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <lcd_puts+0xc>
        lcd_putc(c);
 1f6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1fa:	89 91       	ld	r24, Y+
 1fc:	88 23       	and	r24, r24
 1fe:	d9 f7       	brne	.-10     	; 0x1f6 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 20c:	02 c0       	rjmp	.+4      	; 0x212 <lcd_puts_p+0xc>
        lcd_putc(c);
 20e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 212:	fe 01       	movw	r30, r28
 214:	21 96       	adiw	r28, 0x01	; 1
 216:	84 91       	lpm	r24, Z
 218:	88 23       	and	r24, r24
 21a:	c9 f7       	brne	.-14     	; 0x20e <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 222:	cf 93       	push	r28
 224:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 226:	8a b1       	in	r24, 0x0a	; 10
 228:	8f 67       	ori	r24, 0x7F	; 127
 22a:	8a b9       	out	0x0a, r24	; 10
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	99 ef       	ldi	r25, 0xF9	; 249
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <lcd_init+0xe>
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_init+0x14>
 236:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 238:	59 9a       	sbi	0x0b, 1	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 23a:	58 9a       	sbi	0x0b, 0	; 11
    lcd_e_toggle();
 23c:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 240:	8f e1       	ldi	r24, 0x1F	; 31
 242:	9e e4       	ldi	r25, 0x4E	; 78
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <lcd_init+0x22>
 248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_init+0x28>
 24a:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_init+0x32>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_init+0x38>
 25a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 25c:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_init+0x42>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_init+0x48>
 26a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 26c:	58 98       	cbi	0x0b, 0	; 11
    lcd_e_toggle();
 26e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_init+0x54>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <lcd_init+0x5a>
 27c:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 27e:	88 e2       	ldi	r24, 0x28	; 40
 280:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 284:	88 e0       	ldi	r24, 0x08	; 8
 286:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 28a:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 294:	8c 2f       	mov	r24, r28
 296:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_command>

}/* lcd_init */
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <main>:

#define COUNTER_MIN_VALUE       1000
#define CALIBRATION_CONSTANT    2000000

int main(void)
{   
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	c6 54       	subi	r28, 0x46	; 70
 2a8:	d0 40       	sbci	r29, 0x00	; 0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
    DDRB &=~ (1 << PB2);
 2b4:	22 98       	cbi	0x04, 2	; 4
    PORTB |= (1 << PB2);
 2b6:	2a 9a       	sbi	0x05, 2	; 5

    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 2b8:	8c e0       	ldi	r24, 0x0C	; 12
 2ba:	0e 94 11 01 	call	0x222	; 0x222 <lcd_init>

    // Frequency variables
    uint32_t freqInt;
    uint32_t freqFrac;

    uint8_t lastState = PINB & _BV(PINB2);
 2be:	83 b1       	in	r24, 0x03	; 3
    cli();
 2c0:	f8 94       	cli
        // counter = 8340 (freq = 119.90)
        // freqInt = 119
        // freqFrac = 7540

        freqInt = CALIBRATION_CONSTANT / counter;
        freqFrac = ((CALIBRATION_CONSTANT % counter) * (100)) / counter;
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	48 2e       	mov	r4, r24
 2c6:	84 e8       	ldi	r24, 0x84	; 132
 2c8:	58 2e       	mov	r5, r24
 2ca:	8e e1       	ldi	r24, 0x1E	; 30
 2cc:	68 2e       	mov	r6, r24
 2ce:	71 2c       	mov	r7, r1

        // Write to LCD
        lcd_clrscr();
        sprintf(intCountStr, "%d.", freqInt);
 2d0:	92 e2       	ldi	r25, 0x22	; 34
 2d2:	29 2e       	mov	r2, r25
 2d4:	31 2c       	mov	r3, r1
 2d6:	2c 0e       	add	r2, r28
 2d8:	3d 1e       	adc	r3, r29
        lcd_puts(intCountStr);
        sprintf(fraccountStr, "%02d Hz\n", freqFrac);
 2da:	8e 01       	movw	r16, r28
 2dc:	0f 5f       	subi	r16, 0xFF	; 255
 2de:	1f 4f       	sbci	r17, 0xFF	; 255
    uint8_t lastState = PINB & _BV(PINB2);
    cli();

    for (;;) {
        // Prepare for capturing the falling edge
        counter = 0;
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	ba 01       	movw	r22, r20

        // Count while the positive pulse is done with a minimum to avoid bounce
        while ((PINB & (1 << PINB2)) || (counter < COUNTER_MIN_VALUE)) {
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <main+0x52>
            counter++;
 2e8:	4f 5f       	subi	r20, 0xFF	; 255
 2ea:	5f 4f       	sbci	r21, 0xFF	; 255
 2ec:	6f 4f       	sbci	r22, 0xFF	; 255
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
    for (;;) {
        // Prepare for capturing the falling edge
        counter = 0;

        // Count while the positive pulse is done with a minimum to avoid bounce
        while ((PINB & (1 << PINB2)) || (counter < COUNTER_MIN_VALUE)) {
 2f0:	1a 99       	sbic	0x03, 2	; 3
 2f2:	fa cf       	rjmp	.-12     	; 0x2e8 <main+0x4a>
 2f4:	48 3e       	cpi	r20, 0xE8	; 232
 2f6:	23 e0       	ldi	r18, 0x03	; 3
 2f8:	52 07       	cpc	r21, r18
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	62 07       	cpc	r22, r18
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	72 07       	cpc	r23, r18
 302:	90 f3       	brcs	.-28     	; 0x2e8 <main+0x4a>
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	dc 01       	movw	r26, r24
 30a:	03 c0       	rjmp	.+6      	; 0x312 <main+0x74>
        intermediateCounterValue = counter;
        counter = 0;

        // Count while the negative pulse is done with a minimum to avoid bounce
        while (!(PINB & (1 << PINB2)) || (counter < COUNTER_MIN_VALUE)) {
            counter++;
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	a1 1d       	adc	r26, r1
 310:	b1 1d       	adc	r27, r1

        intermediateCounterValue = counter;
        counter = 0;

        // Count while the negative pulse is done with a minimum to avoid bounce
        while (!(PINB & (1 << PINB2)) || (counter < COUNTER_MIN_VALUE)) {
 312:	1a 9b       	sbis	0x03, 2	; 3
 314:	fb cf       	rjmp	.-10     	; 0x30c <main+0x6e>
 316:	88 3e       	cpi	r24, 0xE8	; 232
 318:	23 e0       	ldi	r18, 0x03	; 3
 31a:	92 07       	cpc	r25, r18
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	a2 07       	cpc	r26, r18
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	b2 07       	cpc	r27, r18
 324:	98 f3       	brcs	.-26     	; 0x30c <main+0x6e>
            counter++;
        }

        counter += intermediateCounterValue;
 326:	6c 01       	movw	r12, r24
 328:	7d 01       	movw	r14, r26
 32a:	c4 0e       	add	r12, r20
 32c:	d5 1e       	adc	r13, r21
 32e:	e6 1e       	adc	r14, r22
 330:	f7 1e       	adc	r15, r23
        // counter = 8340 (freq = 119.90)
        // freqInt = 119
        // freqFrac = 7540

        freqInt = CALIBRATION_CONSTANT / counter;
        freqFrac = ((CALIBRATION_CONSTANT % counter) * (100)) / counter;
 332:	c3 01       	movw	r24, r6
 334:	b2 01       	movw	r22, r4
 336:	a7 01       	movw	r20, r14
 338:	96 01       	movw	r18, r12
 33a:	0e 94 33 02 	call	0x466	; 0x466 <__udivmodsi4>
 33e:	49 01       	movw	r8, r18
 340:	5a 01       	movw	r10, r20
 342:	24 e6       	ldi	r18, 0x64	; 100
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	0e 94 14 02 	call	0x428	; 0x428 <__mulsi3>
 34e:	a7 01       	movw	r20, r14
 350:	96 01       	movw	r18, r12
 352:	0e 94 33 02 	call	0x466	; 0x466 <__udivmodsi4>

        // Write to LCD
        lcd_clrscr();
 356:	24 96       	adiw	r28, 0x04	; 4
 358:	2f af       	sts	0x7f, r18
 35a:	24 97       	sbiw	r28, 0x04	; 4
 35c:	25 96       	adiw	r28, 0x05	; 5
 35e:	3f af       	sts	0x7f, r19
 360:	25 97       	sbiw	r28, 0x05	; 5
 362:	26 96       	adiw	r28, 0x06	; 6
 364:	4f af       	sts	0x7f, r20
 366:	26 97       	sbiw	r28, 0x06	; 6
 368:	27 96       	adiw	r28, 0x07	; 7
 36a:	5f af       	sts	0x7f, r21
 36c:	27 97       	sbiw	r28, 0x07	; 7
 36e:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_clrscr>
        sprintf(intCountStr, "%d.", freqInt);
 372:	8d b7       	in	r24, 0x3d	; 61
 374:	9e b7       	in	r25, 0x3e	; 62
 376:	08 97       	sbiw	r24, 0x08	; 8
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	9e bf       	out	0x3e, r25	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	8d bf       	out	0x3d, r24	; 61
 382:	ed b7       	in	r30, 0x3d	; 61
 384:	fe b7       	in	r31, 0x3e	; 62
 386:	31 96       	adiw	r30, 0x01	; 1
 388:	ad b7       	in	r26, 0x3d	; 61
 38a:	be b7       	in	r27, 0x3e	; 62
 38c:	12 96       	adiw	r26, 0x02	; 2
 38e:	3c 92       	st	X, r3
 390:	2e 92       	st	-X, r2
 392:	11 97       	sbiw	r26, 0x01	; 1
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	93 83       	std	Z+3, r25	; 0x03
 39a:	82 83       	std	Z+2, r24	; 0x02
 39c:	84 82       	std	Z+4, r8	; 0x04
 39e:	95 82       	std	Z+5, r9	; 0x05
 3a0:	a6 82       	std	Z+6, r10	; 0x06
 3a2:	b7 82       	std	Z+7, r11	; 0x07
 3a4:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
        lcd_puts(intCountStr);
 3a8:	ad b7       	in	r26, 0x3d	; 61
 3aa:	be b7       	in	r27, 0x3e	; 62
 3ac:	18 96       	adiw	r26, 0x08	; 8
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	be bf       	out	0x3e, r27	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	ad bf       	out	0x3d, r26	; 61
 3b8:	c1 01       	movw	r24, r2
 3ba:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_puts>
        sprintf(fraccountStr, "%02d Hz\n", freqFrac);
 3be:	8d b7       	in	r24, 0x3d	; 61
 3c0:	9e b7       	in	r25, 0x3e	; 62
 3c2:	08 97       	sbiw	r24, 0x08	; 8
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	9e bf       	out	0x3e, r25	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	8d bf       	out	0x3d, r24	; 61
 3ce:	ed b7       	in	r30, 0x3d	; 61
 3d0:	fe b7       	in	r31, 0x3e	; 62
 3d2:	31 96       	adiw	r30, 0x01	; 1
 3d4:	ad b7       	in	r26, 0x3d	; 61
 3d6:	be b7       	in	r27, 0x3e	; 62
 3d8:	12 96       	adiw	r26, 0x02	; 2
 3da:	1c 93       	st	X, r17
 3dc:	0e 93       	st	-X, r16
 3de:	11 97       	sbiw	r26, 0x01	; 1
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	93 83       	std	Z+3, r25	; 0x03
 3e6:	82 83       	std	Z+2, r24	; 0x02
 3e8:	24 96       	adiw	r28, 0x04	; 4
 3ea:	2f ad       	sts	0x6f, r18
 3ec:	24 97       	sbiw	r28, 0x04	; 4
 3ee:	24 83       	std	Z+4, r18	; 0x04
 3f0:	25 96       	adiw	r28, 0x05	; 5
 3f2:	3f ad       	sts	0x6f, r19
 3f4:	25 97       	sbiw	r28, 0x05	; 5
 3f6:	35 83       	std	Z+5, r19	; 0x05
 3f8:	26 96       	adiw	r28, 0x06	; 6
 3fa:	4f ad       	sts	0x6f, r20
 3fc:	26 97       	sbiw	r28, 0x06	; 6
 3fe:	46 83       	std	Z+6, r20	; 0x06
 400:	27 96       	adiw	r28, 0x07	; 7
 402:	5f ad       	sts	0x6f, r21
 404:	27 97       	sbiw	r28, 0x07	; 7
 406:	57 83       	std	Z+7, r21	; 0x07
 408:	0e 94 55 02 	call	0x4aa	; 0x4aa <sprintf>
        lcd_puts(fraccountStr);
 40c:	ad b7       	in	r26, 0x3d	; 61
 40e:	be b7       	in	r27, 0x3e	; 62
 410:	18 96       	adiw	r26, 0x08	; 8
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	f8 94       	cli
 416:	be bf       	out	0x3e, r27	; 62
 418:	0f be       	out	0x3f, r0	; 63
 41a:	ad bf       	out	0x3d, r26	; 61
 41c:	c8 01       	movw	r24, r16
 41e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_puts>
        while (counter < COUNTER_MIN_VALUE) {
            counter++;
        }

        // Wait until the negative pulse is done
        while (!(PINB & (1 << PINB2)))
 422:	1a 9b       	sbis	0x03, 2	; 3
 424:	fe cf       	rjmp	.-4      	; 0x422 <main+0x184>
 426:	5c cf       	rjmp	.-328    	; 0x2e0 <main+0x42>

00000428 <__mulsi3>:
 428:	62 9f       	mul	r22, r18
 42a:	d0 01       	movw	r26, r0
 42c:	73 9f       	mul	r23, r19
 42e:	f0 01       	movw	r30, r0
 430:	82 9f       	mul	r24, r18
 432:	e0 0d       	add	r30, r0
 434:	f1 1d       	adc	r31, r1
 436:	64 9f       	mul	r22, r20
 438:	e0 0d       	add	r30, r0
 43a:	f1 1d       	adc	r31, r1
 43c:	92 9f       	mul	r25, r18
 43e:	f0 0d       	add	r31, r0
 440:	83 9f       	mul	r24, r19
 442:	f0 0d       	add	r31, r0
 444:	74 9f       	mul	r23, r20
 446:	f0 0d       	add	r31, r0
 448:	65 9f       	mul	r22, r21
 44a:	f0 0d       	add	r31, r0
 44c:	99 27       	eor	r25, r25
 44e:	72 9f       	mul	r23, r18
 450:	b0 0d       	add	r27, r0
 452:	e1 1d       	adc	r30, r1
 454:	f9 1f       	adc	r31, r25
 456:	63 9f       	mul	r22, r19
 458:	b0 0d       	add	r27, r0
 45a:	e1 1d       	adc	r30, r1
 45c:	f9 1f       	adc	r31, r25
 45e:	bd 01       	movw	r22, r26
 460:	cf 01       	movw	r24, r30
 462:	11 24       	eor	r1, r1
 464:	08 95       	ret

00000466 <__udivmodsi4>:
 466:	a1 e2       	ldi	r26, 0x21	; 33
 468:	1a 2e       	mov	r1, r26
 46a:	aa 1b       	sub	r26, r26
 46c:	bb 1b       	sub	r27, r27
 46e:	fd 01       	movw	r30, r26
 470:	0d c0       	rjmp	.+26     	; 0x48c <__udivmodsi4_ep>

00000472 <__udivmodsi4_loop>:
 472:	aa 1f       	adc	r26, r26
 474:	bb 1f       	adc	r27, r27
 476:	ee 1f       	adc	r30, r30
 478:	ff 1f       	adc	r31, r31
 47a:	a2 17       	cp	r26, r18
 47c:	b3 07       	cpc	r27, r19
 47e:	e4 07       	cpc	r30, r20
 480:	f5 07       	cpc	r31, r21
 482:	20 f0       	brcs	.+8      	; 0x48c <__udivmodsi4_ep>
 484:	a2 1b       	sub	r26, r18
 486:	b3 0b       	sbc	r27, r19
 488:	e4 0b       	sbc	r30, r20
 48a:	f5 0b       	sbc	r31, r21

0000048c <__udivmodsi4_ep>:
 48c:	66 1f       	adc	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	88 1f       	adc	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	1a 94       	dec	r1
 496:	69 f7       	brne	.-38     	; 0x472 <__udivmodsi4_loop>
 498:	60 95       	com	r22
 49a:	70 95       	com	r23
 49c:	80 95       	com	r24
 49e:	90 95       	com	r25
 4a0:	9b 01       	movw	r18, r22
 4a2:	ac 01       	movw	r20, r24
 4a4:	bd 01       	movw	r22, r26
 4a6:	cf 01       	movw	r24, r30
 4a8:	08 95       	ret

000004aa <sprintf>:
 4aa:	ae e0       	ldi	r26, 0x0E	; 14
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	eb e5       	ldi	r30, 0x5B	; 91
 4b0:	f2 e0       	ldi	r31, 0x02	; 2
 4b2:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__prologue_saves__+0x1c>
 4b6:	0d 89       	ldd	r16, Y+21	; 0x15
 4b8:	1e 89       	ldd	r17, Y+22	; 0x16
 4ba:	86 e0       	ldi	r24, 0x06	; 6
 4bc:	8c 83       	std	Y+4, r24	; 0x04
 4be:	1a 83       	std	Y+2, r17	; 0x02
 4c0:	09 83       	std	Y+1, r16	; 0x01
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	9f e7       	ldi	r25, 0x7F	; 127
 4c6:	9e 83       	std	Y+6, r25	; 0x06
 4c8:	8d 83       	std	Y+5, r24	; 0x05
 4ca:	ae 01       	movw	r20, r28
 4cc:	47 5e       	subi	r20, 0xE7	; 231
 4ce:	5f 4f       	sbci	r21, 0xFF	; 255
 4d0:	ce 01       	movw	r24, r28
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	6f 89       	ldd	r22, Y+23	; 0x17
 4d6:	78 8d       	ldd	r23, Y+24	; 0x18
 4d8:	0e 94 77 02 	call	0x4ee	; 0x4ee <vfprintf>
 4dc:	ef 81       	ldd	r30, Y+7	; 0x07
 4de:	f8 85       	ldd	r31, Y+8	; 0x08
 4e0:	e0 0f       	add	r30, r16
 4e2:	f1 1f       	adc	r31, r17
 4e4:	10 82       	st	Z, r1
 4e6:	2e 96       	adiw	r28, 0x0e	; 14
 4e8:	e4 e0       	ldi	r30, 0x04	; 4
 4ea:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__epilogue_restores__+0x1c>

000004ee <vfprintf>:
 4ee:	ad e0       	ldi	r26, 0x0D	; 13
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	ed e7       	ldi	r30, 0x7D	; 125
 4f4:	f2 e0       	ldi	r31, 0x02	; 2
 4f6:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__prologue_saves__>
 4fa:	3c 01       	movw	r6, r24
 4fc:	7d 87       	std	Y+13, r23	; 0x0d
 4fe:	6c 87       	std	Y+12, r22	; 0x0c
 500:	5a 01       	movw	r10, r20
 502:	fc 01       	movw	r30, r24
 504:	17 82       	std	Z+7, r1	; 0x07
 506:	16 82       	std	Z+6, r1	; 0x06
 508:	83 81       	ldd	r24, Z+3	; 0x03
 50a:	81 ff       	sbrs	r24, 1
 50c:	c8 c1       	rjmp	.+912    	; 0x89e <vfprintf+0x3b0>
 50e:	2e 01       	movw	r4, r28
 510:	08 94       	sec
 512:	41 1c       	adc	r4, r1
 514:	51 1c       	adc	r5, r1
 516:	f3 01       	movw	r30, r6
 518:	93 81       	ldd	r25, Z+3	; 0x03
 51a:	ec 85       	ldd	r30, Y+12	; 0x0c
 51c:	fd 85       	ldd	r31, Y+13	; 0x0d
 51e:	93 fd       	sbrc	r25, 3
 520:	85 91       	lpm	r24, Z+
 522:	93 ff       	sbrs	r25, 3
 524:	81 91       	ld	r24, Z+
 526:	fd 87       	std	Y+13, r31	; 0x0d
 528:	ec 87       	std	Y+12, r30	; 0x0c
 52a:	88 23       	and	r24, r24
 52c:	09 f4       	brne	.+2      	; 0x530 <vfprintf+0x42>
 52e:	b3 c1       	rjmp	.+870    	; 0x896 <vfprintf+0x3a8>
 530:	85 32       	cpi	r24, 0x25	; 37
 532:	41 f4       	brne	.+16     	; 0x544 <vfprintf+0x56>
 534:	93 fd       	sbrc	r25, 3
 536:	85 91       	lpm	r24, Z+
 538:	93 ff       	sbrs	r25, 3
 53a:	81 91       	ld	r24, Z+
 53c:	fd 87       	std	Y+13, r31	; 0x0d
 53e:	ec 87       	std	Y+12, r30	; 0x0c
 540:	85 32       	cpi	r24, 0x25	; 37
 542:	29 f4       	brne	.+10     	; 0x54e <vfprintf+0x60>
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	b3 01       	movw	r22, r6
 548:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <fputc>
 54c:	e4 cf       	rjmp	.-56     	; 0x516 <vfprintf+0x28>
 54e:	ff 24       	eor	r15, r15
 550:	ee 24       	eor	r14, r14
 552:	10 e0       	ldi	r17, 0x00	; 0
 554:	10 32       	cpi	r17, 0x20	; 32
 556:	b0 f4       	brcc	.+44     	; 0x584 <vfprintf+0x96>
 558:	8b 32       	cpi	r24, 0x2B	; 43
 55a:	69 f0       	breq	.+26     	; 0x576 <vfprintf+0x88>
 55c:	8c 32       	cpi	r24, 0x2C	; 44
 55e:	28 f4       	brcc	.+10     	; 0x56a <vfprintf+0x7c>
 560:	80 32       	cpi	r24, 0x20	; 32
 562:	51 f0       	breq	.+20     	; 0x578 <vfprintf+0x8a>
 564:	83 32       	cpi	r24, 0x23	; 35
 566:	71 f4       	brne	.+28     	; 0x584 <vfprintf+0x96>
 568:	0b c0       	rjmp	.+22     	; 0x580 <vfprintf+0x92>
 56a:	8d 32       	cpi	r24, 0x2D	; 45
 56c:	39 f0       	breq	.+14     	; 0x57c <vfprintf+0x8e>
 56e:	80 33       	cpi	r24, 0x30	; 48
 570:	49 f4       	brne	.+18     	; 0x584 <vfprintf+0x96>
 572:	11 60       	ori	r17, 0x01	; 1
 574:	2c c0       	rjmp	.+88     	; 0x5ce <vfprintf+0xe0>
 576:	12 60       	ori	r17, 0x02	; 2
 578:	14 60       	ori	r17, 0x04	; 4
 57a:	29 c0       	rjmp	.+82     	; 0x5ce <vfprintf+0xe0>
 57c:	18 60       	ori	r17, 0x08	; 8
 57e:	27 c0       	rjmp	.+78     	; 0x5ce <vfprintf+0xe0>
 580:	10 61       	ori	r17, 0x10	; 16
 582:	25 c0       	rjmp	.+74     	; 0x5ce <vfprintf+0xe0>
 584:	17 fd       	sbrc	r17, 7
 586:	2e c0       	rjmp	.+92     	; 0x5e4 <vfprintf+0xf6>
 588:	28 2f       	mov	r18, r24
 58a:	20 53       	subi	r18, 0x30	; 48
 58c:	2a 30       	cpi	r18, 0x0A	; 10
 58e:	98 f4       	brcc	.+38     	; 0x5b6 <vfprintf+0xc8>
 590:	16 ff       	sbrs	r17, 6
 592:	08 c0       	rjmp	.+16     	; 0x5a4 <vfprintf+0xb6>
 594:	8f 2d       	mov	r24, r15
 596:	88 0f       	add	r24, r24
 598:	f8 2e       	mov	r15, r24
 59a:	ff 0c       	add	r15, r15
 59c:	ff 0c       	add	r15, r15
 59e:	f8 0e       	add	r15, r24
 5a0:	f2 0e       	add	r15, r18
 5a2:	15 c0       	rjmp	.+42     	; 0x5ce <vfprintf+0xe0>
 5a4:	8e 2d       	mov	r24, r14
 5a6:	88 0f       	add	r24, r24
 5a8:	e8 2e       	mov	r14, r24
 5aa:	ee 0c       	add	r14, r14
 5ac:	ee 0c       	add	r14, r14
 5ae:	e8 0e       	add	r14, r24
 5b0:	e2 0e       	add	r14, r18
 5b2:	10 62       	ori	r17, 0x20	; 32
 5b4:	0c c0       	rjmp	.+24     	; 0x5ce <vfprintf+0xe0>
 5b6:	8e 32       	cpi	r24, 0x2E	; 46
 5b8:	21 f4       	brne	.+8      	; 0x5c2 <vfprintf+0xd4>
 5ba:	16 fd       	sbrc	r17, 6
 5bc:	6c c1       	rjmp	.+728    	; 0x896 <vfprintf+0x3a8>
 5be:	10 64       	ori	r17, 0x40	; 64
 5c0:	06 c0       	rjmp	.+12     	; 0x5ce <vfprintf+0xe0>
 5c2:	8c 36       	cpi	r24, 0x6C	; 108
 5c4:	11 f4       	brne	.+4      	; 0x5ca <vfprintf+0xdc>
 5c6:	10 68       	ori	r17, 0x80	; 128
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <vfprintf+0xe0>
 5ca:	88 36       	cpi	r24, 0x68	; 104
 5cc:	59 f4       	brne	.+22     	; 0x5e4 <vfprintf+0xf6>
 5ce:	ec 85       	ldd	r30, Y+12	; 0x0c
 5d0:	fd 85       	ldd	r31, Y+13	; 0x0d
 5d2:	93 fd       	sbrc	r25, 3
 5d4:	85 91       	lpm	r24, Z+
 5d6:	93 ff       	sbrs	r25, 3
 5d8:	81 91       	ld	r24, Z+
 5da:	fd 87       	std	Y+13, r31	; 0x0d
 5dc:	ec 87       	std	Y+12, r30	; 0x0c
 5de:	88 23       	and	r24, r24
 5e0:	09 f0       	breq	.+2      	; 0x5e4 <vfprintf+0xf6>
 5e2:	b8 cf       	rjmp	.-144    	; 0x554 <vfprintf+0x66>
 5e4:	98 2f       	mov	r25, r24
 5e6:	95 54       	subi	r25, 0x45	; 69
 5e8:	93 30       	cpi	r25, 0x03	; 3
 5ea:	18 f0       	brcs	.+6      	; 0x5f2 <vfprintf+0x104>
 5ec:	90 52       	subi	r25, 0x20	; 32
 5ee:	93 30       	cpi	r25, 0x03	; 3
 5f0:	38 f4       	brcc	.+14     	; 0x600 <vfprintf+0x112>
 5f2:	24 e0       	ldi	r18, 0x04	; 4
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	a2 0e       	add	r10, r18
 5f8:	b3 1e       	adc	r11, r19
 5fa:	3f e3       	ldi	r19, 0x3F	; 63
 5fc:	39 83       	std	Y+1, r19	; 0x01
 5fe:	0f c0       	rjmp	.+30     	; 0x61e <vfprintf+0x130>
 600:	83 36       	cpi	r24, 0x63	; 99
 602:	31 f0       	breq	.+12     	; 0x610 <vfprintf+0x122>
 604:	83 37       	cpi	r24, 0x73	; 115
 606:	81 f0       	breq	.+32     	; 0x628 <vfprintf+0x13a>
 608:	83 35       	cpi	r24, 0x53	; 83
 60a:	09 f0       	breq	.+2      	; 0x60e <vfprintf+0x120>
 60c:	5a c0       	rjmp	.+180    	; 0x6c2 <vfprintf+0x1d4>
 60e:	22 c0       	rjmp	.+68     	; 0x654 <vfprintf+0x166>
 610:	f5 01       	movw	r30, r10
 612:	80 81       	ld	r24, Z
 614:	89 83       	std	Y+1, r24	; 0x01
 616:	22 e0       	ldi	r18, 0x02	; 2
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	a2 0e       	add	r10, r18
 61c:	b3 1e       	adc	r11, r19
 61e:	21 e0       	ldi	r18, 0x01	; 1
 620:	c2 2e       	mov	r12, r18
 622:	d1 2c       	mov	r13, r1
 624:	42 01       	movw	r8, r4
 626:	14 c0       	rjmp	.+40     	; 0x650 <vfprintf+0x162>
 628:	92 e0       	ldi	r25, 0x02	; 2
 62a:	29 2e       	mov	r2, r25
 62c:	31 2c       	mov	r3, r1
 62e:	2a 0c       	add	r2, r10
 630:	3b 1c       	adc	r3, r11
 632:	f5 01       	movw	r30, r10
 634:	80 80       	ld	r8, Z
 636:	91 80       	ldd	r9, Z+1	; 0x01
 638:	16 ff       	sbrs	r17, 6
 63a:	03 c0       	rjmp	.+6      	; 0x642 <vfprintf+0x154>
 63c:	6f 2d       	mov	r22, r15
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <vfprintf+0x158>
 642:	6f ef       	ldi	r22, 0xFF	; 255
 644:	7f ef       	ldi	r23, 0xFF	; 255
 646:	c4 01       	movw	r24, r8
 648:	0e 94 60 04 	call	0x8c0	; 0x8c0 <strnlen>
 64c:	6c 01       	movw	r12, r24
 64e:	51 01       	movw	r10, r2
 650:	1f 77       	andi	r17, 0x7F	; 127
 652:	15 c0       	rjmp	.+42     	; 0x67e <vfprintf+0x190>
 654:	82 e0       	ldi	r24, 0x02	; 2
 656:	28 2e       	mov	r2, r24
 658:	31 2c       	mov	r3, r1
 65a:	2a 0c       	add	r2, r10
 65c:	3b 1c       	adc	r3, r11
 65e:	f5 01       	movw	r30, r10
 660:	80 80       	ld	r8, Z
 662:	91 80       	ldd	r9, Z+1	; 0x01
 664:	16 ff       	sbrs	r17, 6
 666:	03 c0       	rjmp	.+6      	; 0x66e <vfprintf+0x180>
 668:	6f 2d       	mov	r22, r15
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <vfprintf+0x184>
 66e:	6f ef       	ldi	r22, 0xFF	; 255
 670:	7f ef       	ldi	r23, 0xFF	; 255
 672:	c4 01       	movw	r24, r8
 674:	0e 94 55 04 	call	0x8aa	; 0x8aa <strnlen_P>
 678:	6c 01       	movw	r12, r24
 67a:	10 68       	ori	r17, 0x80	; 128
 67c:	51 01       	movw	r10, r2
 67e:	13 fd       	sbrc	r17, 3
 680:	1c c0       	rjmp	.+56     	; 0x6ba <vfprintf+0x1cc>
 682:	06 c0       	rjmp	.+12     	; 0x690 <vfprintf+0x1a2>
 684:	80 e2       	ldi	r24, 0x20	; 32
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	b3 01       	movw	r22, r6
 68a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <fputc>
 68e:	ea 94       	dec	r14
 690:	8e 2d       	mov	r24, r14
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	c8 16       	cp	r12, r24
 696:	d9 06       	cpc	r13, r25
 698:	a8 f3       	brcs	.-22     	; 0x684 <vfprintf+0x196>
 69a:	0f c0       	rjmp	.+30     	; 0x6ba <vfprintf+0x1cc>
 69c:	f4 01       	movw	r30, r8
 69e:	17 fd       	sbrc	r17, 7
 6a0:	85 91       	lpm	r24, Z+
 6a2:	17 ff       	sbrs	r17, 7
 6a4:	81 91       	ld	r24, Z+
 6a6:	4f 01       	movw	r8, r30
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	b3 01       	movw	r22, r6
 6ac:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <fputc>
 6b0:	e1 10       	cpse	r14, r1
 6b2:	ea 94       	dec	r14
 6b4:	08 94       	sec
 6b6:	c1 08       	sbc	r12, r1
 6b8:	d1 08       	sbc	r13, r1
 6ba:	c1 14       	cp	r12, r1
 6bc:	d1 04       	cpc	r13, r1
 6be:	71 f7       	brne	.-36     	; 0x69c <vfprintf+0x1ae>
 6c0:	e7 c0       	rjmp	.+462    	; 0x890 <vfprintf+0x3a2>
 6c2:	84 36       	cpi	r24, 0x64	; 100
 6c4:	11 f0       	breq	.+4      	; 0x6ca <vfprintf+0x1dc>
 6c6:	89 36       	cpi	r24, 0x69	; 105
 6c8:	51 f5       	brne	.+84     	; 0x71e <vfprintf+0x230>
 6ca:	f5 01       	movw	r30, r10
 6cc:	17 ff       	sbrs	r17, 7
 6ce:	07 c0       	rjmp	.+14     	; 0x6de <vfprintf+0x1f0>
 6d0:	80 81       	ld	r24, Z
 6d2:	91 81       	ldd	r25, Z+1	; 0x01
 6d4:	a2 81       	ldd	r26, Z+2	; 0x02
 6d6:	b3 81       	ldd	r27, Z+3	; 0x03
 6d8:	24 e0       	ldi	r18, 0x04	; 4
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	08 c0       	rjmp	.+16     	; 0x6ee <vfprintf+0x200>
 6de:	80 81       	ld	r24, Z
 6e0:	91 81       	ldd	r25, Z+1	; 0x01
 6e2:	aa 27       	eor	r26, r26
 6e4:	97 fd       	sbrc	r25, 7
 6e6:	a0 95       	com	r26
 6e8:	ba 2f       	mov	r27, r26
 6ea:	22 e0       	ldi	r18, 0x02	; 2
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	a2 0e       	add	r10, r18
 6f0:	b3 1e       	adc	r11, r19
 6f2:	01 2f       	mov	r16, r17
 6f4:	0f 76       	andi	r16, 0x6F	; 111
 6f6:	b7 ff       	sbrs	r27, 7
 6f8:	08 c0       	rjmp	.+16     	; 0x70a <vfprintf+0x21c>
 6fa:	b0 95       	com	r27
 6fc:	a0 95       	com	r26
 6fe:	90 95       	com	r25
 700:	81 95       	neg	r24
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	af 4f       	sbci	r26, 0xFF	; 255
 706:	bf 4f       	sbci	r27, 0xFF	; 255
 708:	00 68       	ori	r16, 0x80	; 128
 70a:	bc 01       	movw	r22, r24
 70c:	cd 01       	movw	r24, r26
 70e:	a2 01       	movw	r20, r4
 710:	2a e0       	ldi	r18, 0x0A	; 10
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	0e 94 97 04 	call	0x92e	; 0x92e <__ultoa_invert>
 718:	d8 2e       	mov	r13, r24
 71a:	d4 18       	sub	r13, r4
 71c:	3f c0       	rjmp	.+126    	; 0x79c <vfprintf+0x2ae>
 71e:	85 37       	cpi	r24, 0x75	; 117
 720:	21 f4       	brne	.+8      	; 0x72a <vfprintf+0x23c>
 722:	1f 7e       	andi	r17, 0xEF	; 239
 724:	2a e0       	ldi	r18, 0x0A	; 10
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	20 c0       	rjmp	.+64     	; 0x76a <vfprintf+0x27c>
 72a:	19 7f       	andi	r17, 0xF9	; 249
 72c:	8f 36       	cpi	r24, 0x6F	; 111
 72e:	a9 f0       	breq	.+42     	; 0x75a <vfprintf+0x26c>
 730:	80 37       	cpi	r24, 0x70	; 112
 732:	20 f4       	brcc	.+8      	; 0x73c <vfprintf+0x24e>
 734:	88 35       	cpi	r24, 0x58	; 88
 736:	09 f0       	breq	.+2      	; 0x73a <vfprintf+0x24c>
 738:	ae c0       	rjmp	.+348    	; 0x896 <vfprintf+0x3a8>
 73a:	0b c0       	rjmp	.+22     	; 0x752 <vfprintf+0x264>
 73c:	80 37       	cpi	r24, 0x70	; 112
 73e:	21 f0       	breq	.+8      	; 0x748 <vfprintf+0x25a>
 740:	88 37       	cpi	r24, 0x78	; 120
 742:	09 f0       	breq	.+2      	; 0x746 <vfprintf+0x258>
 744:	a8 c0       	rjmp	.+336    	; 0x896 <vfprintf+0x3a8>
 746:	01 c0       	rjmp	.+2      	; 0x74a <vfprintf+0x25c>
 748:	10 61       	ori	r17, 0x10	; 16
 74a:	14 ff       	sbrs	r17, 4
 74c:	09 c0       	rjmp	.+18     	; 0x760 <vfprintf+0x272>
 74e:	14 60       	ori	r17, 0x04	; 4
 750:	07 c0       	rjmp	.+14     	; 0x760 <vfprintf+0x272>
 752:	14 ff       	sbrs	r17, 4
 754:	08 c0       	rjmp	.+16     	; 0x766 <vfprintf+0x278>
 756:	16 60       	ori	r17, 0x06	; 6
 758:	06 c0       	rjmp	.+12     	; 0x766 <vfprintf+0x278>
 75a:	28 e0       	ldi	r18, 0x08	; 8
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	05 c0       	rjmp	.+10     	; 0x76a <vfprintf+0x27c>
 760:	20 e1       	ldi	r18, 0x10	; 16
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <vfprintf+0x27c>
 766:	20 e1       	ldi	r18, 0x10	; 16
 768:	32 e0       	ldi	r19, 0x02	; 2
 76a:	f5 01       	movw	r30, r10
 76c:	17 ff       	sbrs	r17, 7
 76e:	07 c0       	rjmp	.+14     	; 0x77e <vfprintf+0x290>
 770:	60 81       	ld	r22, Z
 772:	71 81       	ldd	r23, Z+1	; 0x01
 774:	82 81       	ldd	r24, Z+2	; 0x02
 776:	93 81       	ldd	r25, Z+3	; 0x03
 778:	44 e0       	ldi	r20, 0x04	; 4
 77a:	50 e0       	ldi	r21, 0x00	; 0
 77c:	06 c0       	rjmp	.+12     	; 0x78a <vfprintf+0x29c>
 77e:	60 81       	ld	r22, Z
 780:	71 81       	ldd	r23, Z+1	; 0x01
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	42 e0       	ldi	r20, 0x02	; 2
 788:	50 e0       	ldi	r21, 0x00	; 0
 78a:	a4 0e       	add	r10, r20
 78c:	b5 1e       	adc	r11, r21
 78e:	a2 01       	movw	r20, r4
 790:	0e 94 97 04 	call	0x92e	; 0x92e <__ultoa_invert>
 794:	d8 2e       	mov	r13, r24
 796:	d4 18       	sub	r13, r4
 798:	01 2f       	mov	r16, r17
 79a:	0f 77       	andi	r16, 0x7F	; 127
 79c:	06 ff       	sbrs	r16, 6
 79e:	09 c0       	rjmp	.+18     	; 0x7b2 <vfprintf+0x2c4>
 7a0:	0e 7f       	andi	r16, 0xFE	; 254
 7a2:	df 14       	cp	r13, r15
 7a4:	30 f4       	brcc	.+12     	; 0x7b2 <vfprintf+0x2c4>
 7a6:	04 ff       	sbrs	r16, 4
 7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <vfprintf+0x2c8>
 7aa:	02 fd       	sbrc	r16, 2
 7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <vfprintf+0x2c8>
 7ae:	0f 7e       	andi	r16, 0xEF	; 239
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <vfprintf+0x2c8>
 7b2:	1d 2d       	mov	r17, r13
 7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <vfprintf+0x2ca>
 7b6:	1f 2d       	mov	r17, r15
 7b8:	80 2f       	mov	r24, r16
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	04 ff       	sbrs	r16, 4
 7be:	0c c0       	rjmp	.+24     	; 0x7d8 <vfprintf+0x2ea>
 7c0:	fe 01       	movw	r30, r28
 7c2:	ed 0d       	add	r30, r13
 7c4:	f1 1d       	adc	r31, r1
 7c6:	20 81       	ld	r18, Z
 7c8:	20 33       	cpi	r18, 0x30	; 48
 7ca:	11 f4       	brne	.+4      	; 0x7d0 <vfprintf+0x2e2>
 7cc:	09 7e       	andi	r16, 0xE9	; 233
 7ce:	09 c0       	rjmp	.+18     	; 0x7e2 <vfprintf+0x2f4>
 7d0:	02 ff       	sbrs	r16, 2
 7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <vfprintf+0x2f2>
 7d4:	1e 5f       	subi	r17, 0xFE	; 254
 7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <vfprintf+0x2f4>
 7d8:	86 78       	andi	r24, 0x86	; 134
 7da:	90 70       	andi	r25, 0x00	; 0
 7dc:	00 97       	sbiw	r24, 0x00	; 0
 7de:	09 f0       	breq	.+2      	; 0x7e2 <vfprintf+0x2f4>
 7e0:	1f 5f       	subi	r17, 0xFF	; 255
 7e2:	80 2e       	mov	r8, r16
 7e4:	99 24       	eor	r9, r9
 7e6:	03 fd       	sbrc	r16, 3
 7e8:	12 c0       	rjmp	.+36     	; 0x80e <vfprintf+0x320>
 7ea:	00 ff       	sbrs	r16, 0
 7ec:	0d c0       	rjmp	.+26     	; 0x808 <vfprintf+0x31a>
 7ee:	fd 2c       	mov	r15, r13
 7f0:	1e 15       	cp	r17, r14
 7f2:	50 f4       	brcc	.+20     	; 0x808 <vfprintf+0x31a>
 7f4:	fe 0c       	add	r15, r14
 7f6:	f1 1a       	sub	r15, r17
 7f8:	1e 2d       	mov	r17, r14
 7fa:	06 c0       	rjmp	.+12     	; 0x808 <vfprintf+0x31a>
 7fc:	80 e2       	ldi	r24, 0x20	; 32
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	b3 01       	movw	r22, r6
 802:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <fputc>
 806:	1f 5f       	subi	r17, 0xFF	; 255
 808:	1e 15       	cp	r17, r14
 80a:	c0 f3       	brcs	.-16     	; 0x7fc <vfprintf+0x30e>
 80c:	04 c0       	rjmp	.+8      	; 0x816 <vfprintf+0x328>
 80e:	1e 15       	cp	r17, r14
 810:	10 f4       	brcc	.+4      	; 0x816 <vfprintf+0x328>
 812:	e1 1a       	sub	r14, r17
 814:	01 c0       	rjmp	.+2      	; 0x818 <vfprintf+0x32a>
 816:	ee 24       	eor	r14, r14
 818:	84 fe       	sbrs	r8, 4
 81a:	0f c0       	rjmp	.+30     	; 0x83a <vfprintf+0x34c>
 81c:	80 e3       	ldi	r24, 0x30	; 48
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	b3 01       	movw	r22, r6
 822:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <fputc>
 826:	82 fe       	sbrs	r8, 2
 828:	1f c0       	rjmp	.+62     	; 0x868 <vfprintf+0x37a>
 82a:	81 fe       	sbrs	r8, 1
 82c:	03 c0       	rjmp	.+6      	; 0x834 <vfprintf+0x346>
 82e:	88 e5       	ldi	r24, 0x58	; 88
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	10 c0       	rjmp	.+32     	; 0x854 <vfprintf+0x366>
 834:	88 e7       	ldi	r24, 0x78	; 120
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0d c0       	rjmp	.+26     	; 0x854 <vfprintf+0x366>
 83a:	c4 01       	movw	r24, r8
 83c:	86 78       	andi	r24, 0x86	; 134
 83e:	90 70       	andi	r25, 0x00	; 0
 840:	00 97       	sbiw	r24, 0x00	; 0
 842:	91 f0       	breq	.+36     	; 0x868 <vfprintf+0x37a>
 844:	81 fc       	sbrc	r8, 1
 846:	02 c0       	rjmp	.+4      	; 0x84c <vfprintf+0x35e>
 848:	80 e2       	ldi	r24, 0x20	; 32
 84a:	01 c0       	rjmp	.+2      	; 0x84e <vfprintf+0x360>
 84c:	8b e2       	ldi	r24, 0x2B	; 43
 84e:	07 fd       	sbrc	r16, 7
 850:	8d e2       	ldi	r24, 0x2D	; 45
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	b3 01       	movw	r22, r6
 856:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <fputc>
 85a:	06 c0       	rjmp	.+12     	; 0x868 <vfprintf+0x37a>
 85c:	80 e3       	ldi	r24, 0x30	; 48
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	b3 01       	movw	r22, r6
 862:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <fputc>
 866:	fa 94       	dec	r15
 868:	df 14       	cp	r13, r15
 86a:	c0 f3       	brcs	.-16     	; 0x85c <vfprintf+0x36e>
 86c:	da 94       	dec	r13
 86e:	f2 01       	movw	r30, r4
 870:	ed 0d       	add	r30, r13
 872:	f1 1d       	adc	r31, r1
 874:	80 81       	ld	r24, Z
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	b3 01       	movw	r22, r6
 87a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <fputc>
 87e:	dd 20       	and	r13, r13
 880:	a9 f7       	brne	.-22     	; 0x86c <vfprintf+0x37e>
 882:	06 c0       	rjmp	.+12     	; 0x890 <vfprintf+0x3a2>
 884:	80 e2       	ldi	r24, 0x20	; 32
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	b3 01       	movw	r22, r6
 88a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <fputc>
 88e:	ea 94       	dec	r14
 890:	ee 20       	and	r14, r14
 892:	c1 f7       	brne	.-16     	; 0x884 <vfprintf+0x396>
 894:	40 ce       	rjmp	.-896    	; 0x516 <vfprintf+0x28>
 896:	f3 01       	movw	r30, r6
 898:	86 81       	ldd	r24, Z+6	; 0x06
 89a:	97 81       	ldd	r25, Z+7	; 0x07
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <vfprintf+0x3b4>
 89e:	8f ef       	ldi	r24, 0xFF	; 255
 8a0:	9f ef       	ldi	r25, 0xFF	; 255
 8a2:	2d 96       	adiw	r28, 0x0d	; 13
 8a4:	e2 e1       	ldi	r30, 0x12	; 18
 8a6:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__epilogue_restores__>

000008aa <strnlen_P>:
 8aa:	fc 01       	movw	r30, r24
 8ac:	05 90       	lpm	r0, Z+
 8ae:	61 50       	subi	r22, 0x01	; 1
 8b0:	70 40       	sbci	r23, 0x00	; 0
 8b2:	01 10       	cpse	r0, r1
 8b4:	d8 f7       	brcc	.-10     	; 0x8ac <strnlen_P+0x2>
 8b6:	80 95       	com	r24
 8b8:	90 95       	com	r25
 8ba:	8e 0f       	add	r24, r30
 8bc:	9f 1f       	adc	r25, r31
 8be:	08 95       	ret

000008c0 <strnlen>:
 8c0:	fc 01       	movw	r30, r24
 8c2:	61 50       	subi	r22, 0x01	; 1
 8c4:	70 40       	sbci	r23, 0x00	; 0
 8c6:	01 90       	ld	r0, Z+
 8c8:	01 10       	cpse	r0, r1
 8ca:	d8 f7       	brcc	.-10     	; 0x8c2 <strnlen+0x2>
 8cc:	80 95       	com	r24
 8ce:	90 95       	com	r25
 8d0:	8e 0f       	add	r24, r30
 8d2:	9f 1f       	adc	r25, r31
 8d4:	08 95       	ret

000008d6 <fputc>:
 8d6:	0f 93       	push	r16
 8d8:	1f 93       	push	r17
 8da:	cf 93       	push	r28
 8dc:	df 93       	push	r29
 8de:	8c 01       	movw	r16, r24
 8e0:	eb 01       	movw	r28, r22
 8e2:	8b 81       	ldd	r24, Y+3	; 0x03
 8e4:	81 ff       	sbrs	r24, 1
 8e6:	1b c0       	rjmp	.+54     	; 0x91e <__stack+0x1f>
 8e8:	82 ff       	sbrs	r24, 2
 8ea:	0d c0       	rjmp	.+26     	; 0x906 <__stack+0x7>
 8ec:	2e 81       	ldd	r18, Y+6	; 0x06
 8ee:	3f 81       	ldd	r19, Y+7	; 0x07
 8f0:	8c 81       	ldd	r24, Y+4	; 0x04
 8f2:	9d 81       	ldd	r25, Y+5	; 0x05
 8f4:	28 17       	cp	r18, r24
 8f6:	39 07       	cpc	r19, r25
 8f8:	64 f4       	brge	.+24     	; 0x912 <__stack+0x13>
 8fa:	e8 81       	ld	r30, Y
 8fc:	f9 81       	ldd	r31, Y+1	; 0x01
 8fe:	01 93       	st	Z+, r16
 900:	f9 83       	std	Y+1, r31	; 0x01
 902:	e8 83       	st	Y, r30
 904:	06 c0       	rjmp	.+12     	; 0x912 <__stack+0x13>
 906:	e8 85       	ldd	r30, Y+8	; 0x08
 908:	f9 85       	ldd	r31, Y+9	; 0x09
 90a:	80 2f       	mov	r24, r16
 90c:	09 95       	icall
 90e:	00 97       	sbiw	r24, 0x00	; 0
 910:	31 f4       	brne	.+12     	; 0x91e <__stack+0x1f>
 912:	8e 81       	ldd	r24, Y+6	; 0x06
 914:	9f 81       	ldd	r25, Y+7	; 0x07
 916:	01 96       	adiw	r24, 0x01	; 1
 918:	9f 83       	std	Y+7, r25	; 0x07
 91a:	8e 83       	std	Y+6, r24	; 0x06
 91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0x23>
 91e:	0f ef       	ldi	r16, 0xFF	; 255
 920:	1f ef       	ldi	r17, 0xFF	; 255
 922:	c8 01       	movw	r24, r16
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	08 95       	ret

0000092e <__ultoa_invert>:
 92e:	fa 01       	movw	r30, r20
 930:	aa 27       	eor	r26, r26
 932:	28 30       	cpi	r18, 0x08	; 8
 934:	51 f1       	breq	.+84     	; 0x98a <__ultoa_invert+0x5c>
 936:	20 31       	cpi	r18, 0x10	; 16
 938:	81 f1       	breq	.+96     	; 0x99a <__ultoa_invert+0x6c>
 93a:	e8 94       	clt
 93c:	6f 93       	push	r22
 93e:	6e 7f       	andi	r22, 0xFE	; 254
 940:	6e 5f       	subi	r22, 0xFE	; 254
 942:	7f 4f       	sbci	r23, 0xFF	; 255
 944:	8f 4f       	sbci	r24, 0xFF	; 255
 946:	9f 4f       	sbci	r25, 0xFF	; 255
 948:	af 4f       	sbci	r26, 0xFF	; 255
 94a:	b1 e0       	ldi	r27, 0x01	; 1
 94c:	3e d0       	rcall	.+124    	; 0x9ca <__ultoa_invert+0x9c>
 94e:	b4 e0       	ldi	r27, 0x04	; 4
 950:	3c d0       	rcall	.+120    	; 0x9ca <__ultoa_invert+0x9c>
 952:	67 0f       	add	r22, r23
 954:	78 1f       	adc	r23, r24
 956:	89 1f       	adc	r24, r25
 958:	9a 1f       	adc	r25, r26
 95a:	a1 1d       	adc	r26, r1
 95c:	68 0f       	add	r22, r24
 95e:	79 1f       	adc	r23, r25
 960:	8a 1f       	adc	r24, r26
 962:	91 1d       	adc	r25, r1
 964:	a1 1d       	adc	r26, r1
 966:	6a 0f       	add	r22, r26
 968:	71 1d       	adc	r23, r1
 96a:	81 1d       	adc	r24, r1
 96c:	91 1d       	adc	r25, r1
 96e:	a1 1d       	adc	r26, r1
 970:	20 d0       	rcall	.+64     	; 0x9b2 <__ultoa_invert+0x84>
 972:	09 f4       	brne	.+2      	; 0x976 <__ultoa_invert+0x48>
 974:	68 94       	set
 976:	3f 91       	pop	r19
 978:	2a e0       	ldi	r18, 0x0A	; 10
 97a:	26 9f       	mul	r18, r22
 97c:	11 24       	eor	r1, r1
 97e:	30 19       	sub	r19, r0
 980:	30 5d       	subi	r19, 0xD0	; 208
 982:	31 93       	st	Z+, r19
 984:	de f6       	brtc	.-74     	; 0x93c <__ultoa_invert+0xe>
 986:	cf 01       	movw	r24, r30
 988:	08 95       	ret
 98a:	46 2f       	mov	r20, r22
 98c:	47 70       	andi	r20, 0x07	; 7
 98e:	40 5d       	subi	r20, 0xD0	; 208
 990:	41 93       	st	Z+, r20
 992:	b3 e0       	ldi	r27, 0x03	; 3
 994:	0f d0       	rcall	.+30     	; 0x9b4 <__ultoa_invert+0x86>
 996:	c9 f7       	brne	.-14     	; 0x98a <__ultoa_invert+0x5c>
 998:	f6 cf       	rjmp	.-20     	; 0x986 <__ultoa_invert+0x58>
 99a:	46 2f       	mov	r20, r22
 99c:	4f 70       	andi	r20, 0x0F	; 15
 99e:	40 5d       	subi	r20, 0xD0	; 208
 9a0:	4a 33       	cpi	r20, 0x3A	; 58
 9a2:	18 f0       	brcs	.+6      	; 0x9aa <__ultoa_invert+0x7c>
 9a4:	49 5d       	subi	r20, 0xD9	; 217
 9a6:	31 fd       	sbrc	r19, 1
 9a8:	40 52       	subi	r20, 0x20	; 32
 9aa:	41 93       	st	Z+, r20
 9ac:	02 d0       	rcall	.+4      	; 0x9b2 <__ultoa_invert+0x84>
 9ae:	a9 f7       	brne	.-22     	; 0x99a <__ultoa_invert+0x6c>
 9b0:	ea cf       	rjmp	.-44     	; 0x986 <__ultoa_invert+0x58>
 9b2:	b4 e0       	ldi	r27, 0x04	; 4
 9b4:	a6 95       	lsr	r26
 9b6:	97 95       	ror	r25
 9b8:	87 95       	ror	r24
 9ba:	77 95       	ror	r23
 9bc:	67 95       	ror	r22
 9be:	ba 95       	dec	r27
 9c0:	c9 f7       	brne	.-14     	; 0x9b4 <__ultoa_invert+0x86>
 9c2:	00 97       	sbiw	r24, 0x00	; 0
 9c4:	61 05       	cpc	r22, r1
 9c6:	71 05       	cpc	r23, r1
 9c8:	08 95       	ret
 9ca:	9b 01       	movw	r18, r22
 9cc:	ac 01       	movw	r20, r24
 9ce:	0a 2e       	mov	r0, r26
 9d0:	06 94       	lsr	r0
 9d2:	57 95       	ror	r21
 9d4:	47 95       	ror	r20
 9d6:	37 95       	ror	r19
 9d8:	27 95       	ror	r18
 9da:	ba 95       	dec	r27
 9dc:	c9 f7       	brne	.-14     	; 0x9d0 <__ultoa_invert+0xa2>
 9de:	62 0f       	add	r22, r18
 9e0:	73 1f       	adc	r23, r19
 9e2:	84 1f       	adc	r24, r20
 9e4:	95 1f       	adc	r25, r21
 9e6:	a0 1d       	adc	r26, r0
 9e8:	08 95       	ret

000009ea <__prologue_saves__>:
 9ea:	2f 92       	push	r2
 9ec:	3f 92       	push	r3
 9ee:	4f 92       	push	r4
 9f0:	5f 92       	push	r5
 9f2:	6f 92       	push	r6
 9f4:	7f 92       	push	r7
 9f6:	8f 92       	push	r8
 9f8:	9f 92       	push	r9
 9fa:	af 92       	push	r10
 9fc:	bf 92       	push	r11
 9fe:	cf 92       	push	r12
 a00:	df 92       	push	r13
 a02:	ef 92       	push	r14
 a04:	ff 92       	push	r15
 a06:	0f 93       	push	r16
 a08:	1f 93       	push	r17
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
 a12:	ca 1b       	sub	r28, r26
 a14:	db 0b       	sbc	r29, r27
 a16:	0f b6       	in	r0, 0x3f	; 63
 a18:	f8 94       	cli
 a1a:	de bf       	out	0x3e, r29	; 62
 a1c:	0f be       	out	0x3f, r0	; 63
 a1e:	cd bf       	out	0x3d, r28	; 61
 a20:	09 94       	ijmp

00000a22 <__epilogue_restores__>:
 a22:	2a 88       	ldd	r2, Y+18	; 0x12
 a24:	39 88       	ldd	r3, Y+17	; 0x11
 a26:	48 88       	ldd	r4, Y+16	; 0x10
 a28:	5f 84       	ldd	r5, Y+15	; 0x0f
 a2a:	6e 84       	ldd	r6, Y+14	; 0x0e
 a2c:	7d 84       	ldd	r7, Y+13	; 0x0d
 a2e:	8c 84       	ldd	r8, Y+12	; 0x0c
 a30:	9b 84       	ldd	r9, Y+11	; 0x0b
 a32:	aa 84       	ldd	r10, Y+10	; 0x0a
 a34:	b9 84       	ldd	r11, Y+9	; 0x09
 a36:	c8 84       	ldd	r12, Y+8	; 0x08
 a38:	df 80       	ldd	r13, Y+7	; 0x07
 a3a:	ee 80       	ldd	r14, Y+6	; 0x06
 a3c:	fd 80       	ldd	r15, Y+5	; 0x05
 a3e:	0c 81       	ldd	r16, Y+4	; 0x04
 a40:	1b 81       	ldd	r17, Y+3	; 0x03
 a42:	aa 81       	ldd	r26, Y+2	; 0x02
 a44:	b9 81       	ldd	r27, Y+1	; 0x01
 a46:	ce 0f       	add	r28, r30
 a48:	d1 1d       	adc	r29, r1
 a4a:	0f b6       	in	r0, 0x3f	; 63
 a4c:	f8 94       	cli
 a4e:	de bf       	out	0x3e, r29	; 62
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	cd bf       	out	0x3d, r28	; 61
 a54:	ed 01       	movw	r28, r26
 a56:	08 95       	ret

00000a58 <_exit>:
 a58:	f8 94       	cli

00000a5a <__stop_program>:
 a5a:	ff cf       	rjmp	.-2      	; 0xa5a <__stop_program>
