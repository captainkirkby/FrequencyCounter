
freq_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000338  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000338  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000081  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000b00  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009cf  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000035e  00000000  00000000  0000156f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041c  00000000  00000000  000018cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00001cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000229  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043b  00000000  00000000  0000206d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  9e:	0c 94 9a 01 	jmp	0x334	; 0x334 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  a6:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
  b0:	5e 98       	cbi	0x0b, 6	; 11
}
  b2:	08 95       	ret

000000b4 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  b4:	cf 93       	push	r28
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
  b6:	66 23       	and	r22, r22
  b8:	11 f0       	breq	.+4      	; 0xbe <lcd_write+0xa>
       lcd_rs_high();
  ba:	5c 9a       	sbi	0x0b, 4	; 11
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <lcd_write+0xc>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  be:	5c 98       	cbi	0x0b, 4	; 11
    }
    lcd_rw_low();    /* RW=0  write mode      */
  c0:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  c2:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  c4:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  c6:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  c8:	53 9a       	sbi	0x0a, 3	; 10
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  ca:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  cc:	5a 98       	cbi	0x0b, 2	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  ce:	29 98       	cbi	0x05, 1	; 5
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  d0:	28 98       	cbi	0x05, 0	; 5
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  d2:	87 fd       	sbrc	r24, 7
  d4:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  d6:	c8 2f       	mov	r28, r24
  d8:	86 fd       	sbrc	r24, 6
  da:	5a 9a       	sbi	0x0b, 2	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  dc:	c5 fd       	sbrc	r28, 5
  de:	29 9a       	sbi	0x05, 1	; 5
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  e0:	c4 fd       	sbrc	r28, 4
  e2:	28 9a       	sbi	0x05, 0	; 5
        lcd_e_toggle();
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  e8:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  ea:	5a 98       	cbi	0x0b, 2	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  ec:	29 98       	cbi	0x05, 1	; 5
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  ee:	28 98       	cbi	0x05, 0	; 5
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5a 9a       	sbi	0x0b, 2	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  f8:	c1 fd       	sbrc	r28, 1
  fa:	29 9a       	sbi	0x05, 1	; 5
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  fc:	c0 fd       	sbrc	r28, 0
  fe:	28 9a       	sbi	0x05, 0	; 5
        lcd_e_toggle();        
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 104:	28 9a       	sbi	0x05, 0	; 5
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 106:	29 9a       	sbi	0x05, 1	; 5
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 108:	5a 9a       	sbi	0x0b, 2	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 10a:	5b 9a       	sbi	0x0b, 3	; 11
    }
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 110:	5c 98       	cbi	0x0b, 4	; 11
    lcd_rw_high();                           /* RW=1  read mode      */
 112:	5d 9a       	sbi	0x0b, 5	; 11
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 114:	20 98       	cbi	0x04, 0	; 4
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 116:	21 98       	cbi	0x04, 1	; 4
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 118:	52 98       	cbi	0x0a, 2	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 11a:	53 98       	cbi	0x0a, 3	; 10
                
        /* read high nibble first */
        lcd_e_high();
 11c:	5e 9a       	sbi	0x0b, 6	; 11
 11e:	85 e0       	ldi	r24, 0x05	; 5
 120:	8a 95       	dec	r24
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_read.constprop.0+0x10>
 124:	00 00       	nop
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 126:	18 99       	sbic	0x03, 0	; 3
 128:	02 c0       	rjmp	.+4      	; 0x12e <lcd_read.constprop.0+0x1e>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	01 c0       	rjmp	.+2      	; 0x130 <lcd_read.constprop.0+0x20>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 12e:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 130:	19 99       	sbic	0x03, 1	; 3
 132:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 134:	4a 99       	sbic	0x09, 2	; 9
 136:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 138:	4b 99       	sbic	0x09, 3	; 9
 13a:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 13c:	5e 98       	cbi	0x0b, 6	; 11
 13e:	95 e0       	ldi	r25, 0x05	; 5
 140:	9a 95       	dec	r25
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_read.constprop.0+0x30>
 144:	00 00       	nop

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
 146:	5e 9a       	sbi	0x0b, 6	; 11
 148:	95 e0       	ldi	r25, 0x05	; 5
 14a:	9a 95       	dec	r25
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_read.constprop.0+0x3a>
 14e:	00 00       	nop
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 150:	18 99       	sbic	0x03, 0	; 3
 152:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 154:	19 99       	sbic	0x03, 1	; 3
 156:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 158:	4a 99       	sbic	0x09, 2	; 9
 15a:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 15c:	4b 99       	sbic	0x09, 3	; 9
 15e:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 160:	5e 98       	cbi	0x0b, 6	; 11
    }
    return data;
}
 162:	08 95       	ret

00000164 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 164:	0e 94 88 00 	call	0x110	; 0x110 <lcd_read.constprop.0>
 168:	87 fd       	sbrc	r24, 7
 16a:	fc cf       	rjmp	.-8      	; 0x164 <lcd_waitbusy>
 16c:	85 e1       	ldi	r24, 0x15	; 21
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_waitbusy+0xa>
 172:	00 00       	nop
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 174:	0e 94 88 00 	call	0x110	; 0x110 <lcd_read.constprop.0>
    
}/* lcd_waitbusy */
 178:	08 95       	ret

0000017a <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 17e:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_waitbusy>
    lcd_write(cmd,0);
 182:	8c 2f       	mov	r24, r28
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
}
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 18e:	cf 93       	push	r28
 190:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 192:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_waitbusy>
    lcd_write(data,1);
 196:	8c 2f       	mov	r24, r28
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
 1a2:	66 23       	and	r22, r22
 1a4:	11 f4       	brne	.+4      	; 0x1aa <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 1a6:	80 58       	subi	r24, 0x80	; 128
 1a8:	09 c0       	rjmp	.+18     	; 0x1bc <lcd_gotoxy+0x1a>
    else if ( y==1)
 1aa:	61 30       	cpi	r22, 0x01	; 1
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 1ae:	80 54       	subi	r24, 0x40	; 64
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <lcd_gotoxy+0x1a>
    else if ( y==2)
 1b2:	62 30       	cpi	r22, 0x02	; 2
 1b4:	11 f4       	brne	.+4      	; 0x1ba <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
 1b6:	8c 56       	subi	r24, 0x6C	; 108
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
 1ba:	8c 52       	subi	r24, 0x2C	; 44
 1bc:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_command>
 1c0:	08 95       	ret

000001c2 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 1c2:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_waitbusy>
}
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	08 95       	ret

000001ca <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_command>
}
 1d0:	08 95       	ret

000001d2 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_command>
}
 1d8:	08 95       	ret

000001da <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1de:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_waitbusy>
    if (c=='\n')
 1e2:	ca 30       	cpi	r28, 0x0A	; 10
 1e4:	a1 f4       	brne	.+40     	; 0x20e <lcd_putc+0x34>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
 1e6:	84 31       	cpi	r24, 0x14	; 20
 1e8:	48 f0       	brcs	.+18     	; 0x1fc <lcd_putc+0x22>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
 1ea:	98 2f       	mov	r25, r24
 1ec:	90 54       	subi	r25, 0x40	; 64
 1ee:	94 31       	cpi	r25, 0x14	; 20
 1f0:	38 f0       	brcs	.+14     	; 0x200 <lcd_putc+0x26>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
 1f2:	84 51       	subi	r24, 0x14	; 20
 1f4:	8c 32       	cpi	r24, 0x2C	; 44
 1f6:	30 f4       	brcc	.+12     	; 0x204 <lcd_putc+0x2a>
        addressCounter = LCD_START_LINE4;
 1f8:	84 e5       	ldi	r24, 0x54	; 84
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
 1fc:	80 e4       	ldi	r24, 0x40	; 64
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <lcd_putc+0x2c>
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
 200:	84 e1       	ldi	r24, 0x14	; 20
 202:	01 c0       	rjmp	.+2      	; 0x206 <lcd_putc+0x2c>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
 204:	80 e0       	ldi	r24, 0x00	; 0
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 206:	80 58       	subi	r24, 0x80	; 128
 208:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_command>
 20c:	04 c0       	rjmp	.+8      	; 0x216 <lcd_putc+0x3c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 20e:	8c 2f       	mov	r24, r28
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
    }

}/* lcd_putc */
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 220:	02 c0       	rjmp	.+4      	; 0x226 <lcd_puts+0xc>
        lcd_putc(c);
 222:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 226:	89 91       	ld	r24, Y+
 228:	88 23       	and	r24, r24
 22a:	d9 f7       	brne	.-10     	; 0x222 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 238:	02 c0       	rjmp	.+4      	; 0x23e <lcd_puts_p+0xc>
        lcd_putc(c);
 23a:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 23e:	fe 01       	movw	r30, r28
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	84 91       	lpm	r24, Z
 244:	88 23       	and	r24, r24
 246:	c9 f7       	brne	.-14     	; 0x23a <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 24e:	cf 93       	push	r28
 250:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 252:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 254:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 256:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 258:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 25a:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 25c:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 25e:	53 9a       	sbi	0x0a, 3	; 10
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	99 ef       	ldi	r25, 0xF9	; 249
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_init+0x16>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_init+0x1c>
 26a:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 26c:	29 9a       	sbi	0x05, 1	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 26e:	28 9a       	sbi	0x05, 0	; 5
    lcd_e_toggle();
 270:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 274:	8f e1       	ldi	r24, 0x1F	; 31
 276:	9e e4       	ldi	r25, 0x4E	; 78
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_init+0x2a>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <lcd_init+0x30>
 27e:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 280:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_init+0x3a>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <lcd_init+0x40>
 28e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 290:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <lcd_init+0x4a>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <lcd_init+0x50>
 29e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2a0:	28 98       	cbi	0x05, 0	; 5
    lcd_e_toggle();
 2a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_init+0x5c>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcd_init+0x62>
 2b0:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2b2:	88 e2       	ldi	r24, 0x28	; 40
 2b4:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2b8:	88 e0       	ldi	r24, 0x08	; 8
 2ba:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2be:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2c8:	8c 2f       	mov	r24, r28
 2ca:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_command>

}/* lcd_init */
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <main>:
#define AVG_AMT                 100
#define LCD_WRITE_RATE          10

int main(void)
{   
    DDRB &=~ (1 << PB2);
 2d2:	22 98       	cbi	0x04, 2	; 4
    PORTB |= (1 << PB2);
 2d4:	2a 9a       	sbi	0x05, 2	; 5

    DDRB |= (1 << PB3);
 2d6:	23 9a       	sbi	0x04, 3	; 4

    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 2d8:	8c e0       	ldi	r24, 0x0C	; 12
 2da:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_init>

    // Frequency variables
    uint32_t freqInt;
    uint32_t freqFrac;

    uint8_t lastState = PINB & _BV(PINB2);
 2de:	83 b1       	in	r24, 0x03	; 3
    cli();
 2e0:	f8 94       	cli

    for (;;) {
        // Prepare for capturing the falling edge
        counter = 0;

        PORTB |= (1 << PB3);
 2e2:	2b 9a       	sbi	0x05, 3	; 5
    uint8_t lastState = PINB & _BV(PINB2);
    cli();

    for (;;) {
        // Prepare for capturing the falling edge
        counter = 0;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	dc 01       	movw	r26, r24

        PORTB |= (1 << PB3);

        // Count while the positive pulse is happening with a minimum to avoid bounce
        while ((PINB & (1 << PINB2)) || (counter < COUNTER_MIN_VALUE)) {
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <main+0x20>
            counter++;
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	a1 1d       	adc	r26, r1
 2f0:	b1 1d       	adc	r27, r1
        counter = 0;

        PORTB |= (1 << PB3);

        // Count while the positive pulse is happening with a minimum to avoid bounce
        while ((PINB & (1 << PINB2)) || (counter < COUNTER_MIN_VALUE)) {
 2f2:	1a 99       	sbic	0x03, 2	; 3
 2f4:	fb cf       	rjmp	.-10     	; 0x2ec <main+0x1a>
 2f6:	88 3e       	cpi	r24, 0xE8	; 232
 2f8:	23 e0       	ldi	r18, 0x03	; 3
 2fa:	92 07       	cpc	r25, r18
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	a2 07       	cpc	r26, r18
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	b2 07       	cpc	r27, r18
 304:	98 f3       	brcs	.-26     	; 0x2ec <main+0x1a>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	dc 01       	movw	r26, r24
 30c:	03 c0       	rjmp	.+6      	; 0x314 <main+0x42>
        intermediateCounterValue = counter;
        counter = 0;

        // Count while the negative pulse is happening with a minimum to avoid bounce
        while (!(PINB & (1 << PINB2)) || (counter < COUNTER_MIN_VALUE)) {
            counter++;
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	a1 1d       	adc	r26, r1
 312:	b1 1d       	adc	r27, r1

        intermediateCounterValue = counter;
        counter = 0;

        // Count while the negative pulse is happening with a minimum to avoid bounce
        while (!(PINB & (1 << PINB2)) || (counter < COUNTER_MIN_VALUE)) {
 314:	1a 9b       	sbis	0x03, 2	; 3
 316:	fb cf       	rjmp	.-10     	; 0x30e <main+0x3c>
 318:	88 3e       	cpi	r24, 0xE8	; 232
 31a:	23 e0       	ldi	r18, 0x03	; 3
 31c:	92 07       	cpc	r25, r18
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	a2 07       	cpc	r26, r18
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	b2 07       	cpc	r27, r18
 326:	98 f3       	brcs	.-26     	; 0x30e <main+0x3c>
            counter++;
        }

        PORTB &= ~(1 << PB3);
 328:	2b 98       	cbi	0x05, 3	; 5
        while (counter < COUNTER_MIN_VALUE) {
            counter++;
        }

        // Wait until the positive pulse is done
        while ((PINB & (1 << PINB2)))
 32a:	1a 99       	sbic	0x03, 2	; 3
 32c:	fe cf       	rjmp	.-4      	; 0x32a <main+0x58>
            counter++;
        }


        // Wait until the negative pulse is done
        while (!(PINB & (1 << PINB2)))
 32e:	1a 9b       	sbis	0x03, 2	; 3
 330:	fe cf       	rjmp	.-4      	; 0x32e <main+0x5c>
 332:	d7 cf       	rjmp	.-82     	; 0x2e2 <main+0x10>

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
