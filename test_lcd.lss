
test_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000047e  000004f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000954  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000013b  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c8  00000000  00000000  00000fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2c  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000420  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ba  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  00002480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f2  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000506  00000000  00000000  000027fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <__c.1698>:
  68:	4c 69 6e 65 20 31 20 6c 6f 6e 67 65 72 20 74 68     Line 1 longer th
  78:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
  88:	0a 00                                               ..

0000008a <__c.1700>:
  8a:	4c 69 6e 65 20 32 20 6c 6f 6e 67 65 72 20 74 68     Line 2 longer th
  9a:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
	...

000000ab <copyRightChar>:
  ab:	07 08 13 14 14 13 08 07 00 10 08 08 08 08 10 00     ................
	...

000000bc <__ctors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	ee e7       	ldi	r30, 0x7E	; 126
  d0:	f4 e0       	ldi	r31, 0x04	; 4
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
  d4:	05 90       	lpm	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	aa 32       	cpi	r26, 0x2A	; 42
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
  de:	11 e0       	ldi	r17, 0x01	; 1
  e0:	aa e2       	ldi	r26, 0x2A	; 42
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
  e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
  e8:	aa 32       	cpi	r26, 0x2A	; 42
  ea:	b1 07       	cpc	r27, r17
  ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
  ee:	0e 94 87 01 	call	0x30e	; 0x30e <main>
  f2:	0c 94 3d 02 	jmp	0x47a	; 0x47a <_exit>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <wait_until_key_pressed>:
void wait_until_key_pressed(void)
{
    unsigned char temp1, temp2;
    
    do {
        temp1 = PIND;                  // read input
  fa:	99 b1       	in	r25, 0x09	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	ef e1       	ldi	r30, 0x1F	; 31
  fe:	fe e4       	ldi	r31, 0x4E	; 78
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <wait_until_key_pressed+0x6>
 104:	00 c0       	rjmp	.+0      	; 0x106 <wait_until_key_pressed+0xc>
 106:	00 00       	nop
        _delay_ms(5);                  // delay for key debounce
        temp2 = PIND;                  // read input
 108:	89 b1       	in	r24, 0x09	; 9
        temp1 = (temp1 & temp2);       // debounce input
 10a:	89 23       	and	r24, r25
    } while ( temp1 & _BV(PIND2) );
 10c:	82 fd       	sbrc	r24, 2
 10e:	f5 cf       	rjmp	.-22     	; 0xfa <wait_until_key_pressed>
    
    loop_until_bit_is_set(PIND,PIND2);            /* wait until key is released */
 110:	4a 9b       	sbis	0x09, 2	; 9
 112:	fe cf       	rjmp	.-4      	; 0x110 <wait_until_key_pressed+0x16>
}
 114:	08 95       	ret

00000116 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 116:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	85 e0       	ldi	r24, 0x05	; 5
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <toggle_e+0x4>
 11e:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 120:	5e 98       	cbi	0x0b, 6	; 11
}
 122:	08 95       	ret

00000124 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	0f 92       	push	r0
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 130:	66 23       	and	r22, r22
 132:	11 f0       	breq	.+4      	; 0x138 <lcd_write+0x14>
       lcd_rs_high();
 134:	5c 9a       	sbi	0x0b, 4	; 11
 136:	01 c0       	rjmp	.+2      	; 0x13a <lcd_write+0x16>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 138:	5c 98       	cbi	0x0b, 4	; 11
    }
    lcd_rw_low();    /* RW=0  write mode      */
 13a:	5d 98       	cbi	0x0b, 5	; 11

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 13c:	9a b1       	in	r25, 0x0a	; 10
 13e:	9f 60       	ori	r25, 0x0F	; 15
 140:	9a b9       	out	0x0a, r25	; 10

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 142:	1b b1       	in	r17, 0x0b	; 11
 144:	10 7f       	andi	r17, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 146:	98 2f       	mov	r25, r24
 148:	92 95       	swap	r25
 14a:	9f 70       	andi	r25, 0x0F	; 15
 14c:	91 2b       	or	r25, r17
 14e:	9b b9       	out	0x0b, r25	; 11
        lcd_e_toggle();
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	0e 94 8b 00 	call	0x116	; 0x116 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	81 2b       	or	r24, r17
 15c:	8b b9       	out	0x0b, r24	; 11
        lcd_e_toggle();
 15e:	0e 94 8b 00 	call	0x116	; 0x116 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 162:	1f 60       	ori	r17, 0x0F	; 15
 164:	1b b9       	out	0x0b, r17	; 11
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	08 95       	ret

00000170 <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 170:	5c 98       	cbi	0x0b, 4	; 11
    lcd_rw_high();                           /* RW=1  read mode      */
 172:	5d 9a       	sbi	0x0b, 5	; 11
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 174:	8a b1       	in	r24, 0x0a	; 10
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	8a b9       	out	0x0a, r24	; 10
        
        lcd_e_high();
 17a:	5e 9a       	sbi	0x0b, 6	; 11
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_read.constprop.0+0xe>
 182:	00 00       	nop
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 184:	89 b1       	in	r24, 0x09	; 9
        lcd_e_low();
 186:	5e 98       	cbi	0x0b, 6	; 11
 188:	95 e0       	ldi	r25, 0x05	; 5
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_read.constprop.0+0x1a>
 18e:	00 00       	nop
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
 190:	5e 9a       	sbi	0x0b, 6	; 11
 192:	95 e0       	ldi	r25, 0x05	; 5
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_read.constprop.0+0x24>
 198:	00 00       	nop
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 19a:	99 b1       	in	r25, 0x09	; 9
 19c:	9f 70       	andi	r25, 0x0F	; 15
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 19e:	82 95       	swap	r24
 1a0:	80 7f       	andi	r24, 0xF0	; 240
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
 1a2:	5e 98       	cbi	0x0b, 6	; 11
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 1a4:	89 2b       	or	r24, r25
 1a6:	08 95       	ret

000001a8 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 1a8:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_read.constprop.0>
 1ac:	87 fd       	sbrc	r24, 7
 1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <lcd_waitbusy>
 1b0:	85 e1       	ldi	r24, 0x15	; 21
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_waitbusy+0xa>
 1b6:	00 00       	nop
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 1b8:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_read.constprop.0>
    
}/* lcd_waitbusy */
 1bc:	08 95       	ret

000001be <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 1be:	cf 93       	push	r28
 1c0:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 1c2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_waitbusy>
    lcd_write(cmd,0);
 1c6:	8c 2f       	mov	r24, r28
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	0e 94 92 00 	call	0x124	; 0x124 <lcd_write>
}
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 1d2:	cf 93       	push	r28
 1d4:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 1d6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_waitbusy>
    lcd_write(data,1);
 1da:	8c 2f       	mov	r24, r28
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	0e 94 92 00 	call	0x124	; 0x124 <lcd_write>
}
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
 1e6:	66 23       	and	r22, r22
 1e8:	11 f4       	brne	.+4      	; 0x1ee <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 1ea:	80 58       	subi	r24, 0x80	; 128
 1ec:	09 c0       	rjmp	.+18     	; 0x200 <lcd_gotoxy+0x1a>
    else if ( y==1)
 1ee:	61 30       	cpi	r22, 0x01	; 1
 1f0:	11 f4       	brne	.+4      	; 0x1f6 <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 1f2:	80 54       	subi	r24, 0x40	; 64
 1f4:	05 c0       	rjmp	.+10     	; 0x200 <lcd_gotoxy+0x1a>
    else if ( y==2)
 1f6:	62 30       	cpi	r22, 0x02	; 2
 1f8:	11 f4       	brne	.+4      	; 0x1fe <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
 1fa:	8c 56       	subi	r24, 0x6C	; 108
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
 1fe:	8c 52       	subi	r24, 0x2C	; 44
 200:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
 204:	08 95       	ret

00000206 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 206:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_waitbusy>
}
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	08 95       	ret

0000020e <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
}
 214:	08 95       	ret

00000216 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
}
 21c:	08 95       	ret

0000021e <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 21e:	cf 93       	push	r28
 220:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 222:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_waitbusy>
    if (c=='\n')
 226:	ca 30       	cpi	r28, 0x0A	; 10
 228:	a1 f4       	brne	.+40     	; 0x252 <lcd_putc+0x34>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
 22a:	84 31       	cpi	r24, 0x14	; 20
 22c:	48 f0       	brcs	.+18     	; 0x240 <lcd_putc+0x22>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
 22e:	98 2f       	mov	r25, r24
 230:	90 54       	subi	r25, 0x40	; 64
 232:	94 31       	cpi	r25, 0x14	; 20
 234:	38 f0       	brcs	.+14     	; 0x244 <lcd_putc+0x26>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
 236:	84 51       	subi	r24, 0x14	; 20
 238:	8c 32       	cpi	r24, 0x2C	; 44
 23a:	30 f4       	brcc	.+12     	; 0x248 <lcd_putc+0x2a>
        addressCounter = LCD_START_LINE4;
 23c:	84 e5       	ldi	r24, 0x54	; 84
 23e:	05 c0       	rjmp	.+10     	; 0x24a <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
 240:	80 e4       	ldi	r24, 0x40	; 64
 242:	03 c0       	rjmp	.+6      	; 0x24a <lcd_putc+0x2c>
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
 244:	84 e1       	ldi	r24, 0x14	; 20
 246:	01 c0       	rjmp	.+2      	; 0x24a <lcd_putc+0x2c>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
 248:	80 e0       	ldi	r24, 0x00	; 0
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 24a:	80 58       	subi	r24, 0x80	; 128
 24c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
 250:	04 c0       	rjmp	.+8      	; 0x25a <lcd_putc+0x3c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 252:	8c 2f       	mov	r24, r28
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	0e 94 92 00 	call	0x124	; 0x124 <lcd_write>
    }

}/* lcd_putc */
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 264:	02 c0       	rjmp	.+4      	; 0x26a <lcd_puts+0xc>
        lcd_putc(c);
 266:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 26a:	89 91       	ld	r24, Y+
 26c:	88 23       	and	r24, r24
 26e:	d9 f7       	brne	.-10     	; 0x266 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 27c:	02 c0       	rjmp	.+4      	; 0x282 <lcd_puts_p+0xc>
        lcd_putc(c);
 27e:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 282:	fe 01       	movw	r30, r28
 284:	21 96       	adiw	r28, 0x01	; 1
 286:	84 91       	lpm	r24, Z
 288:	88 23       	and	r24, r24
 28a:	c9 f7       	brne	.-14     	; 0x27e <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 292:	cf 93       	push	r28
 294:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 296:	8a b1       	in	r24, 0x0a	; 10
 298:	8f 67       	ori	r24, 0x7F	; 127
 29a:	8a b9       	out	0x0a, r24	; 10
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	99 ef       	ldi	r25, 0xF9	; 249
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_init+0xe>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <lcd_init+0x14>
 2a6:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 2a8:	59 9a       	sbi	0x0b, 1	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 2aa:	58 9a       	sbi	0x0b, 0	; 11
    lcd_e_toggle();
 2ac:	0e 94 8b 00 	call	0x116	; 0x116 <toggle_e>
 2b0:	8f e1       	ldi	r24, 0x1F	; 31
 2b2:	9e e4       	ldi	r25, 0x4E	; 78
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x22>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_init+0x28>
 2ba:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 2bc:	0e 94 8b 00 	call	0x116	; 0x116 <toggle_e>
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_init+0x32>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_init+0x38>
 2ca:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 2cc:	0e 94 8b 00 	call	0x116	; 0x116 <toggle_e>
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <lcd_init+0x42>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <lcd_init+0x48>
 2da:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2dc:	58 98       	cbi	0x0b, 0	; 11
    lcd_e_toggle();
 2de:	0e 94 8b 00 	call	0x116	; 0x116 <toggle_e>
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_init+0x54>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <lcd_init+0x5a>
 2ec:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2ee:	88 e2       	ldi	r24, 0x28	; 40
 2f0:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2f4:	88 e0       	ldi	r24, 0x08	; 8
 2f6:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2fa:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 304:	8c 2f       	mov	r24, r28
 306:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>

}/* lcd_init */
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <main>:


int main(void)
{
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	27 97       	sbiw	r28, 0x07	; 7
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num=134;
    unsigned char i;
    
    
    DDRD &=~ (1 << PD2);        /* Pin PD2 input              */
 322:	52 98       	cbi	0x0a, 2	; 10
    PORTD |= (1 << PD2);        /* Pin PD2 pull-up enabled    */
 324:	5a 9a       	sbi	0x0b, 2	; 11


    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 326:	8c e0       	ldi	r24, 0x0C	; 12
 328:	0e 94 49 01 	call	0x292	; 0x292 <lcd_init>
        /* 
         * Test 1:  write text to display
         */

        /* clear display and home cursor */
        lcd_clrscr();
 32c:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clrscr>
        
        /* put string to display (line 1) with linefeed */
        lcd_puts("LCD Test Line 1\n");
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_puts>

        /* cursor is now on second line, write second line */
        lcd_puts("Line 2");
 338:	81 e1       	ldi	r24, 0x11	; 17
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_puts>
        
        /* move cursor to position 8 on line 2 */
        lcd_gotoxy(7,1);  
 340:	87 e0       	ldi	r24, 0x07	; 7
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_gotoxy>
        
        /* write single char to display */
        lcd_putc(':');
 348:	8a e3       	ldi	r24, 0x3A	; 58
 34a:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_putc>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 34e:	0e 94 7d 00 	call	0xfa	; 0xfa <wait_until_key_pressed>
        /*
         * Test 2: use lcd_command() to turn on cursor
         */
        
        /* turn on cursor */
        lcd_command(LCD_DISP_ON_CURSOR);
 352:	8e e0       	ldi	r24, 0x0E	; 14
 354:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>

        /* put string */
        lcd_puts( "CurOn");
 358:	88 e1       	ldi	r24, 0x18	; 24
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 360:	0e 94 7d 00 	call	0xfa	; 0xfa <wait_until_key_pressed>

        /*
         * Test 3: display shift
         */
        
        lcd_clrscr();     /* clear display home cursor */
 364:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clrscr>

        /* put string from program memory to display */
        lcd_puts_P( "Line 1 longer than 14 characters\n" );
 368:	88 e6       	ldi	r24, 0x68	; 104
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_puts_p>
        lcd_puts_P( "Line 2 longer than 14 characters" );
 370:	8a e8       	ldi	r24, 0x8A	; 138
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_puts_p>
        
        /* move BOTH lines one position to the left */
        lcd_command(LCD_MOVE_DISP_LEFT);
 378:	88 e1       	ldi	r24, 0x18	; 24
 37a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 37e:	0e 94 7d 00 	call	0xfa	; 0xfa <wait_until_key_pressed>

        /* turn off cursor */
        lcd_command(LCD_DISP_ON);
 382:	8c e0       	ldi	r24, 0x0C	; 12
 384:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
        
        /*
         *   Test: Display integer values
         */
        
        lcd_clrscr();   /* clear display home cursor */
 388:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clrscr>
        
        /* convert interger into string */
        itoa( num , buffer, 10);
 38c:	86 e8       	ldi	r24, 0x86	; 134
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	be 01       	movw	r22, r28
 392:	6f 5f       	subi	r22, 0xFF	; 255
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	4a e0       	ldi	r20, 0x0A	; 10
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <itoa>
        
        /* put converted string to display */
        lcd_puts(buffer);
 39e:	ce 01       	movw	r24, r28
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 3a6:	0e 94 7d 00 	call	0xfa	; 0xfa <wait_until_key_pressed>
        
        /*
         *  Test: Display userdefined characters
         */

       lcd_clrscr();   /* clear display home cursor */
 3aa:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clrscr>
       
       lcd_puts("Copyright: ");
 3ae:	8e e1       	ldi	r24, 0x1E	; 30
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_puts>
       
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
 3b6:	80 e4       	ldi	r24, 0x40	; 64
 3b8:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
 3bc:	00 e0       	ldi	r16, 0x00	; 0
 3be:	10 e0       	ldi	r17, 0x00	; 0
       for(i=0; i<16; i++)
       {
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
 3c0:	f8 01       	movw	r30, r16
 3c2:	e5 55       	subi	r30, 0x55	; 85
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	84 91       	lpm	r24, Z
 3c8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_data>
 3cc:	0f 5f       	subi	r16, 0xFF	; 255
 3ce:	1f 4f       	sbci	r17, 0xFF	; 255
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
       for(i=0; i<16; i++)
 3d0:	00 31       	cpi	r16, 0x10	; 16
 3d2:	11 05       	cpc	r17, r1
 3d4:	a9 f7       	brne	.-22     	; 0x3c0 <main+0xb2>
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
       }
       
       /* move cursor to position 0 on line 2 */
       /* Note: this switched back to DD RAM adresses */
       lcd_gotoxy(0,1);
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_gotoxy>
       
       /* display user defined (c), built using two user defined chars */
       lcd_putc(0);
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_putc>
       lcd_putc(1);
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_putc>
       

       /* wait until push button PD2 (INT0) is pressed */
       wait_until_key_pressed();
 3ea:	0e 94 7d 00 	call	0xfa	; 0xfa <wait_until_key_pressed>
              
    }
 3ee:	9e cf       	rjmp	.-196    	; 0x32c <main+0x1e>

000003f0 <itoa>:
 3f0:	fb 01       	movw	r30, r22
 3f2:	9f 01       	movw	r18, r30
 3f4:	e8 94       	clt
 3f6:	42 30       	cpi	r20, 0x02	; 2
 3f8:	c4 f0       	brlt	.+48     	; 0x42a <itoa+0x3a>
 3fa:	45 32       	cpi	r20, 0x25	; 37
 3fc:	b4 f4       	brge	.+44     	; 0x42a <itoa+0x3a>
 3fe:	4a 30       	cpi	r20, 0x0A	; 10
 400:	29 f4       	brne	.+10     	; 0x40c <itoa+0x1c>
 402:	97 fb       	bst	r25, 7
 404:	1e f4       	brtc	.+6      	; 0x40c <itoa+0x1c>
 406:	90 95       	com	r25
 408:	81 95       	neg	r24
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	64 2f       	mov	r22, r20
 40e:	77 27       	eor	r23, r23
 410:	0e 94 29 02 	call	0x452	; 0x452 <__udivmodhi4>
 414:	80 5d       	subi	r24, 0xD0	; 208
 416:	8a 33       	cpi	r24, 0x3A	; 58
 418:	0c f0       	brlt	.+2      	; 0x41c <itoa+0x2c>
 41a:	89 5d       	subi	r24, 0xD9	; 217
 41c:	81 93       	st	Z+, r24
 41e:	cb 01       	movw	r24, r22
 420:	00 97       	sbiw	r24, 0x00	; 0
 422:	a1 f7       	brne	.-24     	; 0x40c <itoa+0x1c>
 424:	16 f4       	brtc	.+4      	; 0x42a <itoa+0x3a>
 426:	5d e2       	ldi	r21, 0x2D	; 45
 428:	51 93       	st	Z+, r21
 42a:	10 82       	st	Z, r1
 42c:	c9 01       	movw	r24, r18
 42e:	0c 94 19 02 	jmp	0x432	; 0x432 <strrev>

00000432 <strrev>:
 432:	dc 01       	movw	r26, r24
 434:	fc 01       	movw	r30, r24
 436:	67 2f       	mov	r22, r23
 438:	71 91       	ld	r23, Z+
 43a:	77 23       	and	r23, r23
 43c:	e1 f7       	brne	.-8      	; 0x436 <strrev+0x4>
 43e:	32 97       	sbiw	r30, 0x02	; 2
 440:	04 c0       	rjmp	.+8      	; 0x44a <strrev+0x18>
 442:	7c 91       	ld	r23, X
 444:	6d 93       	st	X+, r22
 446:	70 83       	st	Z, r23
 448:	62 91       	ld	r22, -Z
 44a:	ae 17       	cp	r26, r30
 44c:	bf 07       	cpc	r27, r31
 44e:	c8 f3       	brcs	.-14     	; 0x442 <strrev+0x10>
 450:	08 95       	ret

00000452 <__udivmodhi4>:
 452:	aa 1b       	sub	r26, r26
 454:	bb 1b       	sub	r27, r27
 456:	51 e1       	ldi	r21, 0x11	; 17
 458:	07 c0       	rjmp	.+14     	; 0x468 <__udivmodhi4_ep>

0000045a <__udivmodhi4_loop>:
 45a:	aa 1f       	adc	r26, r26
 45c:	bb 1f       	adc	r27, r27
 45e:	a6 17       	cp	r26, r22
 460:	b7 07       	cpc	r27, r23
 462:	10 f0       	brcs	.+4      	; 0x468 <__udivmodhi4_ep>
 464:	a6 1b       	sub	r26, r22
 466:	b7 0b       	sbc	r27, r23

00000468 <__udivmodhi4_ep>:
 468:	88 1f       	adc	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	5a 95       	dec	r21
 46e:	a9 f7       	brne	.-22     	; 0x45a <__udivmodhi4_loop>
 470:	80 95       	com	r24
 472:	90 95       	com	r25
 474:	bc 01       	movw	r22, r24
 476:	cd 01       	movw	r24, r26
 478:	08 95       	ret

0000047a <_exit>:
 47a:	f8 94       	cli

0000047c <__stop_program>:
 47c:	ff cf       	rjmp	.-2      	; 0x47c <__stop_program>
